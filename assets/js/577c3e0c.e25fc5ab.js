"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[548],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5213:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const a={title:"Source Code Conventions",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},o="Source Code Conventions",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions",title:"Source Code Conventions",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Source Code Conventions.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Source Code Conventions",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Single Responsibility Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle"},next:{title:"Tell, don't ask",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask"}},s={},c=[{value:"Namensregeln",id:"namensregeln",level:2},{value:"Richtig kommentieren",id:"richtig-kommentieren",level:2}],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"source-code-conventions"},"Source Code Conventions"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nCode wird h\xe4ufiger gelesen als geschrieben. Daher sind Konventionen wichtig, die ein schnelles Lesen und Erfassen des Codes unterst\xfctzen.")),(0,i.kt)("p",null,"Wir betrachten die folgenden Aspekte als wichtig:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Namensregeln"),(0,i.kt)("li",{parentName:"ul"},"Richtig Kommentieren")),(0,i.kt)("p",null,"Damit wollen wir nicht zum Ausdruck bringen, dass andere Konventionen unwichtig sind, wir wollen nur mit diesen beiden beginnen, weil sie uns elementar erscheinen. Bei allen Code Konventionen ist uns n\xe4mlich eines ganz wichtig: es geht weniger um die konkrete Ausgestaltung, sondern um konsequentes Einhalten der Konvention. Und es geht um das Bewusstsein, dass Konventionen notwendig sind."),(0,i.kt)("h2",{id:"namensregeln"},"Namensregeln"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nOhne Namensregeln muss man sich wieder und wieder auf den Stil einzelner Entwickler einstimmen.")),(0,i.kt)("p",null,"Namensregeln sollen den Leser des Codes dabei unterst\xfctzen den Code zu verstehen. Da es z.B. hilfreich ist, Felder von lokalen Variablen zu unterscheiden, k\xf6nnte dies durch eine Namensregel unterst\xfctzt werden. Wie eine solche Konvention im Einzelfall aussieht ist Geschmacksache. Manche bevorzugen \u201ethis.xyz\u201c andere \u201e_xyz\u201c. Welche Variante man w\xe4hlt ist uns nicht wichtig. Uns kommt es darauf an, dass die Konvention konsequent eingehalten wird. Die Notwendigkeit einer Namensregel f\xfcr z.B. Felder h\xe4ngt ferner vom Kontext ab. In einer Klasse mit 400 Zeilen w\xe4re uns eine Namensregel, die Felder gegen\xfcber Variablen hervorhebt, sehr wichtig, in \xfcberschaubaren Klassen tritt sie dagegen eher in den Hintergrund. Mit Hilfe der ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Root%20Cause%20Analysis"},"Root Cause Analysis")," geht der ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/"},"1. CleanCodeDeveloper")," der eigentlichen Ursache f\xfcr die Notwendigkeit einer Namensregel auf den Grund."),(0,i.kt)("h2",{id:"richtig-kommentieren"},"Richtig kommentieren"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nUnn\xf6tige oder gar falsche Kommentare halten beim Lesen auf. Der Code sollte so klar und deutlich sein, dass er m\xf6glichst ohne Kommentare auskommt.")),(0,i.kt)("p",null,"Salopp gesagt ist ein Kommentar im Code ein Hinweis darauf, dass der Code noch verbessert werden kann. Typisch f\xfcr solche F\xe4lle sind 3 Zeilen Code, die mit einem Kommentar \xfcberschrieben sind. An der Stelle hilft es wahrscheinlich, die drei Zeilen als Methode zu extrahieren (Refactoring: Extract Method) und den Kommentar als Name der Methode zu verwenden. Ganz allgemein kann der Bedarf an Kommentaren reduziert werden, in dem man gute Namen verwendet f\xfcr Variablen, Methoden, Klassen, etc."),(0,i.kt)("p",null,"Statt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int laenge; // in mm\n")),(0,i.kt)("p",null,"besser"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"int laengeInMM;\n")),(0,i.kt)("p",null,"Statt"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public double Preis() {\n    // Berechnet den Bruttopreis ...\n}\n")),(0,i.kt)("p",null,"besser"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"public Money BruttoPreis() {\n    ...\n}\n")),(0,i.kt)("p",null,"Kommentiert werden sollte nicht was man tut, sondern, wenn \xfcberhaupt, wieso man etwas tut."))}p.isMDXComponent=!0}}]);