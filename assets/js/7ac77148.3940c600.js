"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[168],{4137:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>f});var t=r(7294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},a=Object.keys(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)r=a[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var c=t.createContext({}),d=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},u=function(e){var n=d(e.components);return t.createElement(c.Provider,{value:n},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=d(r),m=i,f=s["".concat(c,".").concat(m)]||s[m]||p[m]||a;return r?t.createElement(f,o(o({ref:n},u),{},{components:r})):t.createElement(f,o({ref:n},u))}));function f(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[s]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=r[d];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3606:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var t=r(7462),i=(r(7294),r(4137));const a={title:"Beware of Premature Optimization",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},o="Beware of Premature Optimization",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization",title:"Beware of Premature Optimization",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Beware of Premature Optimization",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Version Control System",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Version Control System"},next:{title:"DRY",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"}},c={},d=[],u={toc:d},s="wrapper";function p(e){let{components:n,...r}=e;return(0,i.kt)(s,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"beware-of-premature-optimization"},"Beware of Premature Optimization"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nOptimierungen kosten immer viel Aufwand. Wer Vorsicht walten l\xe4sst, spart oft wertvolle Ressourcen f\xfcr das, was dem Kunden wirklich n\xfctzt.")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Rules of Optimization:"),(0,i.kt)("p",{parentName:"blockquote"},"Rule 1: Don\u2019t do it."),(0,i.kt)("p",{parentName:"blockquote"},"Rule 2 (for experts only): Don\u2019t do it yet."),(0,i.kt)("p",{parentName:"blockquote"},"~ M.A. Jackson")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"More computing sins are committed in the name of efficiency (without necessarily achieving it) than for any other single reason \u2013 including blind stupidity. ~ W.A. Wulf")),(0,i.kt)("p",null,"Im Vordergrund steht immer die Verst\xe4ndlichkeit von Code. Optimierter Code ist aber oft alles andere als lesbar. Indem er auf das absolut Notwendige in k\xfcrzester Form reduziert ist, mag er zwar die funktionalen und nicht funktionalen Anforderungen des Kunden erf\xfcllen \u2013 doch er spiegelt sie meist nicht mehr verst\xe4ndlich wider. Das ist kontraproduktiv im Sinne der meist gew\xfcnschten Langlebigkeit einer Software. Donald Knuth schrieb bereits 1974: "),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"\u201e",(0,i.kt)("em",{parentName:"p"},"We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil."),"\u201c "),(0,i.kt)("p",{parentName:"blockquote"},"(Knuth, Donald.\xa0",(0,i.kt)("a",{parentName:"p",href:"http://web.archive.org/web/20130803163743/http://pplab.snu.ac.kr/courses/adv_pl05/papers/p261-knuth.pdf"},"Structured Programming with go to Statements"),", ACM Journal Computing Surveys, Vol 6, No. 4, Dec. 1974. p.268.)")),(0,i.kt)("p",null,"Die Pfadfinderregel ist also nicht so gemeint, dass immer weiter nach Codeoptimierungen gestrebt werden sollte. Sie bezieht sich vielmehr auf deren Gegenteil: Verst\xe4ndlichkeit und Wandelbarkeit."),(0,i.kt)("p",null,"Wenn es dem ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/CleanCodeDeveloper"},"1. CleanCodeDeveloper")," also in den Fingern zuckt, weil er denkt, er k\xf6nne doch noch ein Qu\xe4ntchen Performance durch eine Optimierung herausholen, dann sollte er mindestens zweimal \xfcberlegen. Zum einen w\xfcrde er dadurch die Verst\xe4ndlichkeit verschlechtern, zum anderen aber ist es wahrscheinlich, dass solche Optimierung aus mehreren Gr\xfcnden gar nicht n\xf6tig ist. Ist die Performanceschw\xe4che nicht nur punktuell und ein Sonderfall, wird sich die n\xe4chste gr\xf6\xdfere Refaktorisierung ihrer wahrscheinlich ohnehin annehmen, denn dann liegt ihr ein grunds\xe4tzliches Strukturproblem zugrunde. Oder die n\xe4chste Hardwaregeneration b\xfcgelt den Performanceknick aus. Oder der Kunde f\xfchlt sich durch ihn gar nicht gest\xf6rt. Ohnehin muss der Kunde die Forderung nach der Optimierung gestellt haben. Keine Codever\xe4nderung ohne vom Kunden erwarteten Nutzen. Denn nur f\xfcr ihn ist er bereit zu zahlen."),(0,i.kt)("p",null,"Der Regel, sich im Zweifelsfall gegen Optimierungen zu entscheiden, liegt somit eine noch fundamentalere zugrunde: YAGNI \u2013\xa0",(0,i.kt)("em",{parentName:"p"},"You ain\u2019t gonna need it"),". Sie ist in ihrer vollen Auspr\xe4gung allerdings erst Bestandteil des\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer%20Grad"},"4. Blauer Grad")),(0,i.kt)("p",null,"PS: Wenn denn entgegen allen Warnungen und Bedenken gerade eine Performanceoptimierung unumg\xe4nglich ist, dann sollte sie immer nur aufgrund einer detaillierten Analyse mit einem Profiler begonnen werden. Denn nur wer mit einem Profiler nachvollziehbar Performance-Engp\xe4sse lokalisiert hat, kann w\xe4hrend und nach der Optimierung pr\xfcfen, ob und inwiefern er sie geweitet hat."))}p.isMDXComponent=!0}}]);