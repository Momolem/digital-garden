"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6357],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>b});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,b=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(b,o(o({ref:n},c),{},{components:t})):r.createElement(b,o({ref:n},c))}));function b(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var u=2;u<a;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9119:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=t(7462),i=(t(7294),t(4137));const a={title:"Liskov Substitution Principle"},o=void 0,s={unversionedId:"main/CleanCode/Liskov Substitution Principle",id:"main/CleanCode/Liskov Substitution Principle",title:"Liskov Substitution Principle",description:"Wer mit Erben zu tun hat, m\xf6chte keine \xdcberraschungen erleben, wenn er mit Erblassern vertraut ist.",source:"@site/docs/main/CleanCode/Liskov Substitution Principle.md",sourceDirName:"main/CleanCode",slug:"/main/CleanCode/Liskov Substitution Principle",permalink:"/docs/main/CleanCode/Liskov Substitution Principle",draft:!1,tags:[],version:"current",frontMatter:{title:"Liskov Substitution Principle"},sidebar:"main",previous:{title:"Legacy Code",permalink:"/docs/main/CleanCode/Legacy Code"},next:{title:"Mediator",permalink:"/docs/main/CleanCode/Mediator"}},l={},u=[],c={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"#cleancode "),(0,i.kt)("h1",{id:"liskov-substitution-principle"},"Liskov Substitution Principle"),(0,i.kt)("p",null,":::question ",(0,i.kt)("strong",{parentName:"p"},"Warum?")),(0,i.kt)("p",null,"Wer mit Erben zu tun hat, m\xf6chte keine \xdcberraschungen erleben, wenn er mit Erblassern vertraut ist.\n:::"),(0,i.kt)("p",null,"Auch das Liskov Substitution Principle (",(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh/view"},"LSP"),") ist ein\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/SOLID"},"SOLID"),"\xa0Prinzip. Es besagt, dass Subtypen sich so verhalten m\xfcssen wie ihr Basistyp. Dies klingt zun\xe4chst banal. Am Beispiel von Exceptions wird deutlich, welche Probleme entstehen, wenn das Prinzip verletzt wird: L\xf6st der Basistyp bei der Ausf\xfchrung einer Methode keine Exception aus, m\xfcssen alle Subtypen sich an diese Regel halten. L\xf6st die Methode eines Subtyps dennoch eine Exception aus, w\xfcrde dies bei Verwendern, die ein Objekt vom Basistyp erwarten, Probleme verursachen, weil sie nicht darauf vorbereitet sind. Wenn der Basistyp an der Stelle keine Exception ausl\xf6st, ist der Verwender nicht darauf eingestellt, Exceptions behandeln zu m\xfcssen."),(0,i.kt)("p",null,"Allgemeiner kann man das Prinzip auch so ausdr\xfccken, dass ein Subtyp die Funktionalit\xe4t eines Basistyps lediglich erweitern, aber nicht einschr\xe4nken darf. Wenn eine Methode im Basistyp auf einem bestimmten Wertebereich definiert ist, darf der Subtyp diesen Wertebereich \xfcbernehmen oder auch erweitern, er darf ihn jedoch keinesfall einschr\xe4nken."),(0,i.kt)("p",null,"Aus dem Liskov Substitution Principle ergibt sich ferner die Empfehlung, \xfcber Vererbung sehr genau nachzudenken. In den allermeisten F\xe4llen ist die Komposition der Vererbung vorzuziehen (",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"/docs/main/CleanCode/Favour%20Composition%20over%20Inheritance"},"Favour Composition over Inheritance")),"). Bei der Vererbung sollte man in jedem Fall \xfcber das Verhalten nachdenken, nicht nur \xfcber die Struktur. Statt Vererbung als",(0,i.kt)("em",{parentName:"p"},"is-a"),"\xa0Relation zu betrachten und dabei nur die (Daten-)Struktur zu bedenken, sollte man besser von einer\xa0",(0,i.kt)("em",{parentName:"p"},"behaves-as"),"\xa0Relation ausgehen und das Verhalten der Klasse ber\xfccksichtigen."))}d.isMDXComponent=!0}}]);