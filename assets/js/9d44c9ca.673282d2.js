"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[8147],{36468:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var a=r(85893),i=r(11151);const t={title:"Law of Demeter",aliases:["LoD"],tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},s="Law of Demeter",o={id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter",title:"Law of Demeter",description:"Warum?",source:"@site/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter.md",sourceDirName:"main/CleanCode/CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Law of Demeter",aliases:["LoD"],tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"cs",previous:{title:"KISS",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS"},next:{title:"Open Closed Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Open Closed Principle"}},l={},c=[];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"law-of-demeter",children:"Law of Demeter"}),"\n",(0,a.jsxs)(n.blockquote,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Warum?"}),"\nAbh\xe4ngigkeiten von Objekten \xfcber mehrere Glieder einer Dienstleistungskette hinweg f\xfchren zu unsch\xf6n enger Kopplung."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Beim\xa0",(0,a.jsx)(n.a,{href:"http://www.lieser-online.de/blog/?p=124",children:"Law of Demeter"}),"\xa0geht es darum, das Zusammenspiel von Objekten auf ein gesundes Ma\xdf zu beschr\xe4nken. Man kann es vereinfacht umschreiben mit \u201eDon\u2019t talk to strangers\u201c. Nach dem Law of Demeter soll eine Methode nur folgende andere Methoden verwenden:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Methoden der eigenen Klasse"}),"\n",(0,a.jsx)(n.li,{children:"Methoden der Parameter"}),"\n",(0,a.jsx)(n.li,{children:"Methoden assoziierter Klassen"}),"\n",(0,a.jsx)(n.li,{children:"Methoden selbst erzeugter Objekte"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Allerdings: Es ist zu ber\xfccksichtigen, dass ab und zu auch reine Datenhaltungsklassen Sinn ergeben. Auf diese muss man das Law of Demeter nat\xfcrlich nicht anwenden. Es kann z.B. durchaus sinnvoll sein, die Konfigurationsdaten in mehrere Klassen hierarchisch zu verteilen, so dass sich am Ende folgender Zugriff auf einen Wert ergeben k\xf6nnte:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:"int margin = config.Pages.Margins.Left;\n"})}),"\n",(0,a.jsx)(n.p,{children:"W\xfcrde man hier das Law of Demeter anwenden, w\xe4re nur der Zugriff auf config.Pages gestattet."})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>o,a:()=>s});var a=r(67294);const i={},t=a.createContext(i);function s(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);