"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[303],{29389:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var t=r(85893),i=r(11151);const a={title:"Simple Refactorings",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},o="Simple Refactorings",s={id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings",title:"Simple Refactorings",description:"Warum?",source:"@site/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings.md",sourceDirName:"main/CleanCode/CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Simple Refactorings",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"cs",previous:{title:"Share Experience",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Share Experience"},next:{title:"Statical Code Analysis",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Statical Code Analysis"}},c={},l=[];function d(e){const n={a:"a",blockquote:"blockquote",h1:"h1",p:"p",strong:"strong",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"simple-refactorings",children:"Simple Refactorings"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warum?"}),"\nCode verbessern ist leichter, wenn man typische Verbesserungshandgriffe kennt. Ihre Anwendungsszenarien machen sensibel f\xfcr Schwachpunkte im eigenen Code. Als anerkannte Muster st\xe4rken sie den Mut, sie anzuwenden."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Um Code immer ein wenig besser zu hinterlassen, als man ihn vorgefunden hat, sind mehr oder weniger gro\xdfe Eingriffe n\xf6tig. Die kann ein Clean Code Developer dank des Versionskontrollsystems angstfrei vornehmen. Doch wie macht er sich die Arbeit m\xf6glichst einfach?"}),"\n",(0,t.jsxs)(n.p,{children:["Das Schl\xfcsselwort lautet \u201eRefaktorisierung\u201c.\xa0",(0,t.jsx)(n.a,{href:"Martin%20Fowler",children:"Martin Fowler"}),"\xa0hat das\xa0",(0,t.jsx)(n.a,{href:"http://www.amazon.de/Refactoring-Studentenausgabe-vorhandener-verbessern-Programmers/dp/3827322782",children:"Refaktorisieren/Refactoring"}),"\xa0in seinem gleichnamigen Buch als grundlegende Technik zur Erh\xf6hung der Codequalit\xe4t beschrieben. Er definiert darin eine Anzahl von Codever\xe4nderungsmustern, um \u201ecode smells\u201c, d.h. suboptimale Strukturen oder allgemeiner Missachtungen von Prinzipien, zu bereinigen."]}),"\n",(0,t.jsxs)(n.p,{children:["F\xfcr den roten Grad ist darin vor allem die Refaktorisierung\xa0",(0,t.jsx)(n.a,{href:"http://martinfowler.com/refactoring/catalog/extractMethod.html",children:"Methode extrahieren"}),"\xa0relevant, um dem DRY-Prinzip zu gen\xfcgen. Die wenden Clean Code Developer an, um mehrfach vorkommenden Code in eine Methode zu extrahieren, die statt seiner an den Wiederholungsorten aufgerufen wird."]}),"\n",(0,t.jsxs)(n.p,{children:["Als zweite Refaktorisierung sollte bei der Arbeit am roten Grad das\xa0",(0,t.jsx)(n.a,{href:"http://martinfowler.com/refactoring/catalog/renameMethod.html",children:"Umbenennen"}),"\xa0wo n\xf6tig eingesetzt werden. Sie passt zur Pfadfinderregel, denn eine oft anzutreffende \u201eUnsauberkeit\u201c im Quellcode sind kryptische Namen."]}),"\n",(0,t.jsxs)(n.p,{children:["Refaktorisierungen k\xf6nnen von Hand angewandt werden, doch es gibt auch Werkzeugunterst\xfctzung. Moderne IDEs wie Visual Studio bieten einige Refactoringmuster, weitere Tools listet unsere\xa0",(0,t.jsx)(n.a,{href:"https://clean-code-developer.de/weitere-infos/werkzeuge/",children:"Werkzeugliste"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["\u201eRefactoring\u201c wie \u201eClean Code\u201c geh\xf6ren zur\xa0",(0,t.jsx)(n.a,{href:"https://clean-code-developer.de/weitere-infos/literatur/",children:"Pflichtlekt\xfcre"}),"\xa0jedes Clean Code Developers ab dem roten Grad."]}),"\n",(0,t.jsxs)(n.p,{children:["F\xfcr weitere Informationen siehe auch unter\xa0",(0,t.jsx)(n.a,{href:"http://refactoring-legacy-code.net/category/einfache-refactorings/",children:"refactoring-legacy-code.net"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,r)=>{r.d(n,{Z:()=>s,a:()=>o});var t=r(67294);const i={},a=t.createContext(i);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);