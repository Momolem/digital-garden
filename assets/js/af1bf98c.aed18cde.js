"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6713],{4137:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(t),g=i,h=p["".concat(c,".").concat(g)]||p[g]||u[g]||a;return t?r.createElement(h,o(o({ref:n},s),{},{components:t})):r.createElement(h,o({ref:n},s))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3325:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(4137));const a={title:"Integration Operation Segregation Principle (IOSP)",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},o="Integration Operation Segregation Principle (IOSP)",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)",title:"Integration Operation Segregation Principle (IOSP)",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP).md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Integration Operation Segregation Principle (IOSP)",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Information Hiding Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle"},next:{title:"Interface Segragation Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle"}},c={},d=[],s={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"integration-operation-segregation-principle-iosp"},"Integration Operation Segregation Principle (IOSP)"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nEin deutliches Symptom schlecht wandelbaren Codes sind tiefe Hierarchien funktionaler Abh\xe4ngigkeit. Sie reduzieren die Verst\xe4ndlichkeit und erschweren automatisierte Tests wie Refactoring.")),(0,i.kt)("p",null,"Indem in Methoden verhaltenserzeugende Anweisungen (Logik) gemischt mit Aufrufen anderer Methoden derselben Codebasis steht, ist nicht mehr klar erkennbar, wie Gesamtverhalten\xa0entsteht; die Anweisungen sind ja verschmiert\xa0\xfcber eine u.U. sehr tiefe Hierarchie. Zudem tendieren Methoden mit solcher Mischung dazu, unbegrenzt zu wachsen."),(0,i.kt)("p",null,"Dem stellt sich das IOSP mit einer klaren Trennung entgegen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Entweder enth\xe4lt eine Methode nur Logik, d.h. Transformationen, Kontrollstrukturen oder I/O- bzw. allgemeiner: API-Aufrufe. Dann wird sie\xa0",(0,i.kt)("em",{parentName:"li"},"Operation"),"\xa0genannt."),(0,i.kt)("li",{parentName:"ul"},"Oder eine Methode enth\xe4lt keinerlei Logik, sondern nur Aufrufe von anderen Methoden derselben Codebasis. Dann wird sie\xa0",(0,i.kt)("em",{parentName:"li"},"Integration"),"\xa0genannt.")),(0,i.kt)("p",null,"Diese strikte Unterscheidung f\xfchrt zu mehrerlei positiven Effekten:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Methoden tendieren dazu, sehr kurz zu bleiben. Denn mehr als 10, 20 oder 30 Zeilen reine Logik oder ausschlie\xdflich Methodenaufrufe \u201ef\xfchlen sich nicht gut an\u201c. Da eine Mischung nicht erlaubt ist, werden weitere kleine Methoden extrahiert."),(0,i.kt)("li",{parentName:"ol"},"Kurze Methoden, die nur Logik enthalten, sind leicht zu testen, da sie keine Abh\xe4ngigkeiten haben."),(0,i.kt)("li",{parentName:"ol"},"Kurze Methoden, die nur Logik enthalten, sind vergleichsweise leicht zu verstehen. Der Methodenname kann wirklich bedeutungsstiftend wirken."),(0,i.kt)("li",{parentName:"ol"},"Kurze Methoden, die ausschlie\xdflich integrieren, sind sehr gut zu verstehen und beschreiben \u201eauf einen Blick\u201c, was geschieht."),(0,i.kt)("li",{parentName:"ol"},"Die Korrektheit von Integrationen l\xe4sst sich sehr leicht durch Augenscheinnahme pr\xfcfen. Es ist lediglich festzustellen, ob Verarbeitungsschritte grunds\xe4tzlich in der korrekten Reihenfolge angeordnet sind. Den Rest \xfcbernimmt der Compiler \u2013 bzw. die Testabdeckung der Operationen."),(0,i.kt)("li",{parentName:"ol"},"Integrationen lassen sich leicht durch \u201eZwischenschieben\u201c weiterer Methoden erweitern, um neue Anforderungen zu erf\xfcllen. Die Verst\xe4ndlichkeit bleibt dabei erhalten.")),(0,i.kt)("p",null,"Das IOSP l\xe4sst sich \u201eaus dem Stand\u201c von jedem Entwickler guten Willens anwenden. Seine Einhaltung ist durch jedermann leicht zu \xfcberpr\xfcfen. Integrationen und Operationen unterscheiden sich in der Form deutlich. Weitere Details, insbesondere zur Abgrenzung zum\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency%20Inversion%20Principle"},"Dependency Inversion Principle"),",\xa0",(0,i.kt)("a",{parentName:"p",href:"https://ccd-akademie.de/dip-oder-iosp/"},"findest du bspw. hier"),"."))}u.isMDXComponent=!0}}]);