"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6277],{763:e=>{e.exports=JSON.parse('{"label":"cleancode/ccd/principle","permalink":"/docs/tags/cleancode-ccd-principle","allTagsPath":"/docs/tags","count":19,"items":[{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization","title":"Beware of Premature Optimization","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency Inversion Principle","title":"Dependency Inversion Principle","description":"Punktgenaues Testen setzt Isolation von Klassen voraus. Isolation entsteht, wenn Klassen keine Abh\xe4ngigkeiten von Implementationen mehr enthalten \u2013 weder zur Laufzeit, noch zur \xdcbersetzungszeit. Konkrete Abh\xe4ngigkeiten sollten deshalb so sp\xe4t wie m\xf6glich entschieden werden. Am besten zur Laufzeit.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency Inversion Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp","title":"Design and Implementation Don\'t Overlapp","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY","title":"DRY","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour Composition over Inheritance","title":"Favour Composition over Inheritance","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour Composition over Inheritance"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Implementation Reflects Design","title":"Implementation Reflects Design","description":"tags: #cleancode","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Implementation Reflects Design"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle","title":"Information Hiding Principle","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)","title":"Integration Operation Segregation Principle (IOSP)","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle","title":"Interface Segragation Principle","description":"Leistungsbeschreibungen, die unabh\xe4ngig von einer konkreten Erf\xfcllung sind, machen unabh\xe4ngig.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS","title":"KISS","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter","title":"Law of Demeter","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Open Closed Principle","title":"Open Closed Principle","description":"Weil das Risiko, durch neue Features ein bisher fehlerfreies System zu instabilisieren, so gering wie m\xf6glich gehalten werden sollte.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Open Closed Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle of Least Astonishment","title":"Principle of Least Astonishment","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle of Least Astonishment"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns","title":"Separation of Concerns","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction","title":"Single Level of Abstraction","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle","title":"Single Responsibility Principle","description":"Fokus erleichtert das Verst\xe4ndnis. Eine Klasse mit genau einer Aufgabe ist verst\xe4ndlicher als ein Gemischtwarenladen.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions","title":"Source Code Conventions","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask","title":"Tell, don\'t ask","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It","title":"You Ain\'t Gonna Need It","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It"}]}')}}]);