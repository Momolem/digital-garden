"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[1449],{35061:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var t=i(85893),r=i(11151);const o={title:"Information Hiding Principle",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},l="Information Hiding Principle",c={id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle",title:"Information Hiding Principle",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Information Hiding Principle.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Information Hiding Principle",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"cs",previous:{title:"Implementation Reflects Design",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Implementation Reflects Design"},next:{title:"Integration Operation Segregation Principle (IOSP)",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)"}},a={},s=[];function d(e){const n={blockquote:"blockquote",h1:"h1",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"information-hiding-principle",children:"Information Hiding Principle"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warum?"}),"\nDurch das Verbergen von Details in einer Schnittstelle werden die Abh\xe4ngigkeiten reduziert."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Beim Design einer Schnittstelle sollte man sich fragen, welche Details au\xdfen unbedingt sichtbar sein m\xfcssen. Mit Schnittstelle sind hier nicht nur Interfaces im objektorientierten Sinne gemeint, sondern auch implizite Schnittstellen. Jede Klasse hat zwangsl\xe4ufig eine implizite Schnittstelle \u2013 sie enth\xe4lt alle nach au\xdfen sichtbaren Details. Je mehr Details von au\xdfen sichtbar sind, desto h\xf6her ist die Kopplung zwischen der Klasse und ihren Verwendern. Benutzen die Verwender einer Klasse erstmal ein Detail, wird es schwerer, dieses Detail zu ver\xe4ndern. Dies steht der Wandelbarkeit der Software entgegen."})]})}function p(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>c,a:()=>l});var t=i(67294);const r={},o=t.createContext(r);function l(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);