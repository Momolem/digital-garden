"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[6111],{53940:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>l,toc:()=>o});var r=i(85893),t=i(11151);const c={title:"KISS",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},a="Keep it simple, stupid (KISS)",l={id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS",title:"KISS",description:"Warum?",source:"@site/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS.md",sourceDirName:"main/CleanCode/CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"KISS",tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"cs",previous:{title:"Interface Segragation Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle"},next:{title:"Law of Demeter",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter"}},s={},o=[];function d(e){const n={a:"a",blockquote:"blockquote",h1:"h1",p:"p",strong:"strong",...(0,t.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"keep-it-simple-stupid-kiss",children:"Keep it simple, stupid (KISS)"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warum?"}),"\nWer mehr tut als das Einfachste, l\xe4sst den Kunden warten und macht die L\xf6sung unn\xf6tig kompliziert."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Oder um es mit Albert Einsteins Worten zu sagen:"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"\u201eAlles sollte so einfach wie m\xf6glich gemacht werden, aber nicht einfacher.\u201c"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["F\xfcr die Wandelbarkeit des Codes ist zwingende Voraussetzung, dass der Code verst\xe4ndlich ist. Eine einfache, klare und leicht verst\xe4ndliche L\xf6sung sollte daher immer bevorzugt werden. Wenn man seinen eigenen Code nach kurzer Zeit schon nicht mehr versteht, sollten die Alarmglocken klingen. Noch wichtiger aber ist, dass auch andere Entwickler den Code schnell verstehen k\xf6nnen. Dabei helfen regelm\xe4\xdfige ",(0,r.jsx)(n.a,{href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Code%20Reviews",children:"Code Reviews"})," und ",(0,r.jsx)(n.a,{href:"Pair%20Programming",children:"Pair Programming"}),". Sie dienen der Kontrolle, ob tats\xe4chlich die einfachste L\xf6sung verwendet wurde."]}),"\n",(0,r.jsxs)(n.p,{children:["Gerade in technischen Details steckt die Versuchung, eine komplizierte L\xf6sung anzustreben. Das Bekannte, naheliegende ist manchmal zu \u201elangweilig\u201c \u2013 und schon hat sich eine komplizierte L\xf6sung eingeschlichen. Wenn die einfache L\xf6sung auch funktioniert, sollte ihr Vorrang gew\xe4hrt werden. Das gleiche gilt f\xfcr Datenstrukturen. Wenn ein ",(0,r.jsx)(n.a,{href:"IEnumerable",children:"IEnumerable"})," reicht, sollte keine ",(0,r.jsx)(n.a,{href:"ICollection",children:"ICollection"})," oder sogar ",(0,r.jsx)(n.a,{href:"IList",children:"IList"})," verwendet werden."]})]})}function h(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>l,a:()=>a});var r=i(67294);const t={},c=r.createContext(t);function a(e){const n=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(c.Provider,{value:n},e.children)}}}]);