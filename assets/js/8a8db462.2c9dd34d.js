"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6939],{4137:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),d=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(t),u=i,h=p["".concat(c,".").concat(u)]||p[u]||m[u]||a;return t?r.createElement(h,o(o({ref:n},s),{},{components:t})):r.createElement(h,o({ref:n},s))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var d=2;d<a;d++)o[d]=t[d];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9141:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=t(7462),i=(t(7294),t(4137));const a={title:"Design and Implementation Don't Overlapp",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},o="Design and Implementation Don\u2019t Overlapp",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp",title:"Design and Implementation Don't Overlapp",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Design and Implementation Don't Overlapp",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Dependency Inversion Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency Inversion Principle"},next:{title:"Favour Composition over Inheritance",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour Composition over Inheritance"}},c={},d=[],s={toc:d},p="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"design-and-implementation-dont-overlapp"},"Design and Implementation Don\u2019t Overlapp"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nPlanungsunterlagen, die mit der Umsetzung nichts mehr gemein haben, schaden mehr, als dass sie n\xfctzen. Deshalb nicht die Planung aufgeben, sondern die Chance auf Inkonsistenz minimieren.")),(0,i.kt)("p",null,"Eines der grundlegenden Probleme der Softwareentwicklung sind Implementationen, denen eine vorausgegangene Planung nicht mehr anzusehen ist. Da h\xe4ngen dann Entwurfsdiagramme an der Wand, die kaum noch etwas mit der Coderealit\xe4t zu tun haben. Die Ursache daf\xfcr ist eine Verletzung des fundamentalen ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY"),"-Prinzips: Entwurf und Implementation sind Wiederholungen desselben, der Struktur einer Software. Da Implementation auf Entwurf folgt und den L\xf6wenanteil der Arbeit ausmacht, geraten beide schnell aus dem Tritt, wenn Struktur\xe4nderungen w\xe4hrend der Implementation nicht immer wieder in den Entwurf eingearbeitet werden. Entwurfsdiagramme sind nach Beginn der Implementation sonst bald nichts mehr wert."),(0,i.kt)("p",null,"Wie kann die Situation verbessert werden? Sollte vielleicht auf Entwurf verzichtet werden, wenn letztlich in der Implementation die \u201eStrukturwahrheit\u201c liegt? Nein, sicher nicht. Entwurf muss sein. Ohne Planung gibt es keine Zielvorstellung. Aber Entwurf und Implementation m\xfcssen dem ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY"),"-Prinzip gerecht werden. Deshalb sollten Entwurf und Implementation sich so wenig \xfcberlappen wie m\xf6glich. Ihre Schnittstelle sollte d\xfcnn sein. Wenn das der Fall ist, stellen sie keine Wiederholungen mehr dar, sondern beschreiben unterschiedliches. Das bedeutet: Entwurf/Architektur k\xfcmmert sich nicht um die Implementation und Implementation k\xfcmmert sich nicht um Architektur."),(0,i.kt)("p",null,"Und wo verl\xe4uft diese Trennlinie? Bei den so genannten Komponenten (s.u. Praktiken). Architekten k\xfcmmern sich nicht um den internen Aufbau von Komponenten. F\xfcr sie sind es Black Boxes, deren Klassenstruktur nicht architekturrelevant ist. Umgekehrt ist f\xfcr einen Komponentenimplementierer die Architektur irrelevant. Was er zu implementieren hat, ergibt sich aus den Komponentenkontrakten, die seine Komponente importiert und exportiert. Einen gr\xf6\xdferen Zusammenhang muss er nicht kennen."),(0,i.kt)("p",null,"Die Aufgabe der Architektur ist es mithin, Software in Komponenten zu zerlegen, deren Abh\xe4ngigkeiten zu definieren und Leistungen in Kontrakten zu beschreiben. Diese Strukturen werden dann auch einzig durch Architekten gepflegt. Und die Aufgabe der Implementation ist es, die von der Architektur definierten Komponenten zu realisieren. Wie sie das tun, ist nicht architekturrelevant. Ihre innere Struktur ist f\xfcr die Architektur unsichtbar."))}m.isMDXComponent=!0}}]);