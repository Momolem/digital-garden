"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2605],{4137:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>p});var i=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var o=i.createContext({}),d=function(e){var n=i.useContext(o),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},u=function(e){var n=d(e.components);return i.createElement(o.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(r),m=t,p=c["".concat(o,".").concat(m)]||c[m]||h[m]||a;return r?i.createElement(p,l(l({ref:n},u),{},{components:r})):i.createElement(p,l({ref:n},u))}));function p(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:t,l[1]=s;for(var d=2;d<a;d++)l[d]=r[d];return i.createElement.apply(null,l)}return i.createElement.apply(null,r)}m.displayName="MDXCreateElement"},1885:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=r(7462),t=(r(7294),r(4137));const a={title:"You Ain't Gonna Need It",aliases:["YAGNI"],tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},l="You Ain\u2019t Gonna Need It",s={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It",title:"You Ain't Gonna Need It",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"You Ain't Gonna Need It",aliases:["YAGNI"],tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Tell, don't ask",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask"},next:{title:"Refaktorisieren",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Refaktorisieren"}},o={},d=[],u={toc:d},c="wrapper";function h(e){let{components:n,...r}=e;return(0,t.kt)(c,(0,i.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"you-aint-gonna-need-it"},"You Ain\u2019t Gonna Need It"),(0,t.kt)("blockquote",null,(0,t.kt)("p",{parentName:"blockquote"},(0,t.kt)("strong",{parentName:"p"},"Warum?"),"\nDinge die niemand braucht, haben keinen Wert. Verschwende an sie also keine Zeit.")),(0,t.kt)("p",null,"Das YAGNI-Prinzip (",(0,t.kt)("em",{parentName:"p"},"You Ain\xb4t Gonna Need It"),") ist eines der einfachsten in der Softwareentwicklung \u2013 und doch wohl das nach dem ",(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY"),"-Prinzip am h\xe4ufigsten verletzte Prinzip. Deshalb steht YAGNI nicht nur am Anfang des\xa0",(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"roten Grades"),", sondern auch hier gegen Ende des Weges durch das\xa0",(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/#Wertesystem%7CWertesystem"}),"."),(0,t.kt)("p",null,"Geschuldet ist das YAGNI-Prinzip dem in der Softwareentwicklung besonderen Verh\xe4ltnis von Anforderungsgenauigkeit und Produktmaterialit\xe4t. Anforderungen sind notorisch ungenau oder wechselnd und das Produkt, in dem sie umgesetzt werden sollen, immateriell. Im Vergleich zum Maschinen- oder Geb\xe4udebau ist das Material also unendlich flexibel und kann sich prinzipiell mit vergleichsweise wenig Aufwand an quasi jede Anforderung anpassen lassen. Hohe Volatili\xe4t bzw. Ungenauigkeit trifft also auf hohe Flexibilit\xe4t. Das scheint zun\xe4chst einmal ideal."),(0,t.kt)("p",null,"Die Praxis zeigt jedoch, dass gerade in diesem Verh\xe4ltnis der Keim des Misserfolges vieler Projekte liegt. Kurzfristig betrachtet, versuchen die Projekte mit dem Naheliegenden auch das Richtige zu tun:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Ungenaue Anforderungen werden oft kompensiert durch Produkte, die versuchen, die Ungenauigkeit zu kompensieren. Die Immaterialit\xe4t von Software wird dazu genutzt, so breit und flexibel zu implementieren, dass auch noch unbekannte oder schwammige Anforderungen quasi schon im vorauseilenden Gehorsam erf\xfcllt werden."),(0,t.kt)("li",{parentName:"ul"},"St\xe4ndig wechselnde Anforderungen werden im Produkt m\xf6glichst schnell nachgef\xfchrt, weil das dank seiner Immaterialit\xe4t m\xf6glich ist.")),(0,t.kt)("p",null,"Langfristig ist solches Verhalten allerdings kontraproduktiv:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Der vorauseilende Gehorsam f\xfchrt zu Breite und Flexibilit\xe4t, die nicht wirklich gebraucht werden. Er realisiert Features, die keine Anwendung finden."),(0,t.kt)("li",{parentName:"ul"},"Schnelle Umbauten an Software aufgrund wechselnder Anforderungen f\xfchren zu Qualit\xe4tserosionen im Code. Software ist zwar immateriell und flexibel \u2013 aber nicht jede Softwarestruktur ist evolvierbar oder auch nur verst\xe4ndlich.")),(0,t.kt)("p",null,"Unklare und wechselnde Anforderungssituationen vor dem Hintergrund der hohen grunds\xe4tzlichen Flexibilit\xe4t von Software f\xfchren schnell zu unn\xf6tigen Aufw\xe4nden und spr\xf6dem Code. Eine gro\xdfe Anzahl von Projekten, die ihre Budgetgrenzen gesprengt haben, und eine noch gr\xf6\xdfere Zahl von Projekten, die schon nach wenigen Jahren unwartbar geworden sind, sind daf\xfcr beredtes Zeugnis."),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/CleanCodeDeveloper"},"CCD")," als professionelle Softwareentwickler sehen es als ihre Pflicht, sich solcher Entwicklung jeden Tag entgegen zu stemmen. Angesichts der nicht zu leugnenden Natur von Software \u2013 sie ist und bleibt immateriell -, liegt der Ansatz daf\xfcr beim Umgang mit den Anforderungen. Das ist der Ursprung des YAGNI-Prinzips."),(0,t.kt)("p",null,"Das YAGNI-Prinzip ist wie ein scharfes Messer: Wer sie anwendet, schneidet ein Problem in kleine W\xfcrfel des unmittelbar N\xf6tigen. Nach dem YAGNI-Prinzip wird nur das unzweifelhaft und unmittelbar Nutzbringende implementiert. Alles andere\u2026 nun, das kommt sp\xe4ter. Insofern geht YAGNI Hand in Hand mit der Regel \u201eEntscheide so sp\xe4t wie m\xf6glich\u201c des\xa0",(0,t.kt)("a",{parentName:"p",href:"http://en.wikipedia.org/wiki/Lean_software_development#Decide_as_late_as_possible"},"Lean Software Development"),"."),(0,t.kt)("p",null,"Das YAGNI-Prinzip ist relevant auf allen Ebenen der Softwareentwicklung und in allen Phasen. Wann immer Sie sich Fragen \u201eSollte ich diesen Aufwand wirklich treiben?\u201c oder \u201eBrauchen wir das wirklich?\u201c \u2013 und sei es auch nur ganz versch\xe4mt und leise im Hinterkopf -, dann ist das ein Anwendungsfall f\xfcr das YAGNI-Prinzip. Es besagt: Wenn im Zweifel, entscheide dich gegen den Aufwand."),(0,t.kt)("p",null,"Das klingt leicht, ist aber schwer. Daher auch die h\xe4ufigen Zuwiderhandlungen. Es gibt viele Kr\xe4fte, die der Entscheidung gegen einen Aufwand widersprechen. \u201eAch, das ist doch gar nicht soviel Aufwand\u201c oder \u201eWenn wir jetzt nicht vorausschauen, dann k\xf6nnen wir in Zukunft nicht mehr anders\u201c sind nur zwei naheliegende Begr\xfcndungen f\xfcr Aufwand, auch wenn Zweifel an seinem Nutzen bestehen. Das betrifft architektonische Entscheidungen (z.B. Soll schon mit einer verteilten Architektur begonnen werden, auch wenn die heutige Last sie noch nicht br\xe4uchte?) wie lokale Entscheidungen (z.B. Soll der Algorithmus schon jetzt optimiert werden, auch wenn er im Augenblick noch keine Performanceprobleme macht?)."),(0,t.kt)("p",null,"Der Kunde bezahlt nur f\xfcr unmittelbaren Nutzen. Was er heute nicht klar spezifizieren kann, nutzt ihm nicht. Es in der Implementation voraussehen zu wollen, investiert also Aufwand ohne Nutzen zu generieren. Wenn der Kunde sp\xe4ter einmal genauer wei\xdf, was er will, dann \u2013 und nicht fr\xfcher! \u2013 ist es Zeit, seinem Willen nachzukommen. Wo immer aber ein Projekt versucht, diesen Willen vorwegzunehmen riskiert es, von der morgigen Willensrealit\xe4t des Kunden widerlegt zu werden. Ein Feature \u2013 funktional oder nicht-funktional -, das heute ohne klare Anforderung implementiert wird, interessiert den Kunden morgen vielleicht schon nicht mehr. Oder es ist ihm nicht mehr so wichtig wie ein anderes Feature."),(0,t.kt)("p",null,"Das bedeutet f\xfcr die Softwareentwicklung:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"Ausschlie\xdflich klare Anforderungen implementieren."),(0,t.kt)("li",{parentName:"ul"},"Der Kunde priorisiert seine klaren Anforderungen."),(0,t.kt)("li",{parentName:"ul"},"Die klaren Anforderungen in der Reihenfolge ihrer Priorisierung umsetzen."),(0,t.kt)("li",{parentName:"ul"},"Entwicklungsprozess und Codestruktur im Gro\xdfen und Kleinen so aufsetzen, dass keine Angst aufkommt, sich \xe4ndernde und neue Anforderungen zu realisieren.")),(0,t.kt)("p",null,(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/CleanCodeDeveloper"},"CCD")," als professionelle Entwickler kommunizieren diese Vorgehensweise unmissverst\xe4ndlich dem Kunden gegen\xfcber. Dadurch werden sie:"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"servicewillig, denn sie m\xfcssen dem Kunden keine klare Anforderung abschlagen"),(0,t.kt)("li",{parentName:"ul"},"verantwortungsbewusst, weil sie das Budget nur f\xfcr klar formulierten Nutzen einsetzen"),(0,t.kt)("li",{parentName:"ul"},"besch\xfctzend dem Code gegen\xfcber, weil sie ihn gegen \xdcberladung mit letztlich Unn\xf6tigem bewahren")),(0,t.kt)("p",null,"YAGNI ist deshalb nicht nur ein Prinzip, das jeder Entwickler befolgen soll, sondern auch ein Prinzip f\xfcr Projekte und Teams, also auf Organisationsebene. YAGNI ist immer in Anschlag zu bringen, genauso wie ",(0,t.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY"),". Wenn im Zweifel, dann verschiebe die Entscheidung falls m\xf6glich. Ansonsten entscheide dich gegen den Aufwand. Das entspannt und entschlackt und f\xfchrt schneller zum Erfolg."))}h.isMDXComponent=!0}}]);