"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[3376],{56228:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var r=i(85893),s=i(11151);const t={title:"Separation of Concerns",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},o="Separation of Concerns (SoC)",a={id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns",title:"Separation of Concerns",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Separation of Concerns.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Separation of Concerns",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"cs",previous:{title:"Principle of Least Astonishment",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle of Least Astonishment"},next:{title:"Single Level of Abstraction",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction"}},l={},c=[];function d(e){const n={a:"a",blockquote:"blockquote",h1:"h1",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"separation-of-concerns-soc",children:"Separation of Concerns (SoC)"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Warum?"}),"\nWenn eine Codeeinheit keine klare Aufgabe hat, ist es schwer sie zu verstehen, sie anzuwenden und sie ggf. zu korrigieren oder zu erweitern."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"\xdcbersetzt mit Trennung der Belange bedeutet dieses Prinzip, dass man nicht mehrere Belange in einer Klasse zusammenfassen soll. Was sind Belange? Belange sind \u201ekomplett verschiedene\u201c Zwecke. Man sagt auch, Belange seien orthogonal zu einander und vor allem orthogonal zur Hauptfunktionalit\xe4t einer Funktionseinheit. Beispiele f\xfcr typische Belange sind: Tracing, Logging, Transaktionalit\xe4t, Caching. Diese Belange sollen nach dem Prinzip der Separation of Concerns in spezialisierte Funktionseinheiten ausgelagert werden."}),"\n",(0,r.jsx)(n.p,{children:"Das Separation of Concerns Prinzip h\xe4ngt eng mit dem Single Responsibility Prinzip zusammen. Dabei sind Concerns eine \xdcbermenge von Responsibilities. Jede Responsibility besteht im Idealfall aus genau einem Concern, n\xe4mlich ihrer Kernfunktionalit\xe4t. Oft sind in einer Responsibility jedoch mehrere Concerns vermischt. Da sich dies technisch meist nicht ganz vermeiden l\xe4\xdft, besagt das Prinzip nicht etwa, dass eine Responsibility nur aus einem Concern bestehen darf, sondern dass die Concerns getrennt sein sollten. Innerhalb einer Methode sollte beispielsweise klar erkennbar sein, dass es mehrere Concerns gibt. Ferner sollten die Concerns nicht irgendwie \xfcber die Methode verstreut sein, sondern so gruppiert, dass klar ist, was zu einem Concern geh\xf6rt."}),"\n",(0,r.jsxs)(n.p,{children:["Im ",(0,r.jsx)(n.a,{href:"Domain%20Driven%20Design",children:"Domain Driven Design"})," versucht man beispielsweise die ",(0,r.jsx)(n.a,{href:"Business%20Domain",children:"Business Domain"})," von der Infrastruktur strikt zu trennen. So darf dort eine Klasse aus der Business Domain keinerlei Infrastruktur, etwa f\xfcr Datenbankzugriffe, enthalten, sondern soll ausschlie\xdflich die Gesch\xe4ftslogik abbilden. Persistenz ist ein \u201eConcern\u201c der nichts mit der Business Logik zu tun hat. Separation of Concerns f\xfchrt zu loser Kopplung und hoher Koh\xe4sion. Die einzelnen Komponenten sind jeweils auf eine Aufgabe, einen Concern, fokussiert und dadurch leicht verst\xe4ndlich. Alle Teile aus denen die Komponente besteht, sind auf diese eine Aufgabe ausgerichtet, dadurch h\xe4ngen die Teile eng zusammen (hohe ",(0,r.jsx)(n.a,{href:"Koh%C3%A4sion",children:"Koh\xe4sion"}),"). Separation of Concerns f\xfchrt dar\xfcber hinaus auch zu gut testbaren Komponenten. Denn wenn der Zweck einer Codeeinheit fokussiert ist, muss weniger breit getestet werden. In Bezug auf die zu testende Codeeinheit sind weniger Testparameterkombinationen zu pr\xfcfen. Soll die Trennung der Belange konsequent betrieben werden, muss die Objektorientierung um das Konzept der ",(0,r.jsx)(n.a,{href:"Aspektorientierten%20Programmierung",children:"Aspektorientierten Programmierung"})," (AOP) erweitert werden. Dadurch wird es m\xf6glich, Aspekte wie etwa ",(0,r.jsx)(n.a,{href:"Transaktionalit%C3%A4t",children:"Transaktionalit\xe4t"}),", ",(0,r.jsx)(n.a,{href:"Tracing",children:"Tracing"})," oder ",(0,r.jsx)(n.a,{href:"Caching",children:"Caching"})," vollst\xe4ndig aus einer Methode herauszuziehen."]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},11151:(e,n,i)=>{i.d(n,{Z:()=>a,a:()=>o});var r=i(67294);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);