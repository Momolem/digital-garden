"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8242],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(h,o(o({ref:n},d),{},{components:t})):r.createElement(h,o({ref:n},d))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2534:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const a={title:"Component Orientation",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},o="Component Orientation",s={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation",title:"Component Orientation",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Component Orientation.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Component Orientation",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Complex Refactorings",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings"},next:{title:"Continuous Delivery",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Delivery"}},l={},c=[],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"component-orientation"},"Component Orientation"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nSoftware braucht Black-Box-Bausteine, die sich parallel entwickeln und testen lassen. Das f\xf6rdert Wandelbarkeit, Produktivit\xe4t und Korrektheit.")),(0,i.kt)("p",null,"Die Prinzipien des\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/#Wertesystem%7CCCD-Wertesystems"}),"\xa0haben sich bisher vor allem auf kleinere Codeausschnitte bezogen. Was sollte in einer Methode stehen, was sollte \xfcber mehrere verteilt werden? Welche Methoden sollte eine Klasse ver\xf6ffentlichen? Woher sollte ein Client-Objekt zu einem Service-Objekt kommen? Bisher ging es um Prinzipien f\xfcr die Softwareentwicklung im Kleinen."),(0,i.kt)("p",null,"Hat das ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/#Wertesystem%7CCCD-Wertesystem"})," denn aber nichts zu gr\xf6\xdferen Strukturen, zur Softwareentwicklung im Gro\xdfen zu sagen? Wie steht es mit der Softwarearchitektur? Genau hier setzt das Prinzip der Komponentenorientierung an. Bisher haben wir zwar auch schon das Wort \u201eKomponente\u201c gebraucht, doch eher lax und in einem umgangssprachlichen Sinn. Von nun an jedoch soll\xa0",(0,i.kt)("em",{parentName:"p"},"Komponente"),"\xa0etwas sehr spezifisches beschreiben, das wir f\xfcr grundlegend f\xfcr evolvierbare Software halten."),(0,i.kt)("p",null,"Solange wir Software letztlich nur aus Klassen mit Methoden aufgebaut denken, versuchen wir sozusagen Computer auf Transistorebene zu beschreiben. Das funktioniert letztlich aber nicht, weil wir im Detailreichtum ersticken. Selbst die Klassen in Schichten zusammenzufassen hilft da nicht viel. Wir brauchen vielmehr sowohl ein Beschreibungsmittel f\xfcr gr\xf6\xdfere Softwarestrukturen. Aber nicht nur das: das Beschreibungsmittel sollte auch ein Implementationsmittel sein \u2013 so wie Klassen -, damit das Modell, der Plan, die Beschreibung sich im Code widerspiegelt."),(0,i.kt)("p",null,"Betriebssystemprozesse sind zwar solche architektonischen Mittel, letztlich sind auch sie jedoch zu gro\xdf. Solange die EXE eines Prozesses einer Applikation aus mehreren Hundert oder Tausend Klassen besteht, gewinnen wir nichts."),(0,i.kt)("p",null,"Hilfe bringt allerdings das Prinzip der Komponentenorientierung. Es besagt, dass ein Anwendungsprozess zun\xe4chst einmal aus Komponenten besteht und nicht aus Klassen. Erst die Bausteine der Komponenten sind dann Klassen. Und was ist eine Komponente? Es gibt einige Definitionen f\xfcr Komponenten, von denen im Kern zwei Kriterien unverbr\xfcchlich erscheinen:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Komponenten sind bin\xe4re Funktionseinheiten. (Eine Klasse hingegen ist eine Funktionseinheit auf Quellcodeebene.)"),(0,i.kt)("li",{parentName:"ul"},"Die Leistung von Komponenten wird durch einen separaten (!) Kontrakt beschrieben. (Die Leistungsbeschreibung einer Klasse liegt hingegen in ihr. Es ist die Summe ihrer Methodensignaturen.)")),(0,i.kt)("p",null,"Ein ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"CCD")," sucht beim Entwurf einer Software nach der Definition der Prozesse also zun\xe4chst nach den Komponenten, aus denen die Prozesse bestehen sollten. Er fragt sich, welche \u201eDienstleistungsbl\xf6cke\u201c machen die Anwendung aus? Und diese Bl\xf6cke sieht der ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/"},"CCD")," als Black Boxes in Bezug auf ihren Aufbau aus Klassen an. Diese Bl\xf6cke sind Assemblies mit wohldefinierter Dienstleistung, aber unbekannter Struktur."),(0,i.kt)("p",null,"Eine Client-Komponente C wei\xdf daher nichts \xfcber die Klassenstruktur ihrer Service-Komponente S. C kennt nur den Kontrakt von S, der unabh\xe4ngig von der Implementation von S ist. Kontrakte sind insofern f\xfcr Komponenten das, was Interfaces f\xfcr Klassen sind. Nicht zuf\xe4llig bestehen Kontrakte zu einem guten Teil oder gar vollst\xe4ndig aus Interfaces."),(0,i.kt)("p",null,"Komponenten sind also Elemente der Planung wie auch der Implementation. Um das zu unterstreichen, werden Komponenten physisch unabh\xe4ngig voneinander implementiert; ein probates Mittel daf\xfcr sind\xa0",(0,i.kt)("em",{parentName:"p"},"Komponentenwerkb\xe4nke"),", d.h. separate Visual Studio Solutions je Komponentenimplementation. Das f\xf6rdert nicht nur die Konzentration auf eine Aufgabe, weil man w\xe4hrend der Arbeit an einer Komponente in der IDE nur deren Code sieht. Dar\xfcber hinaus f\xf6rdert es auch konsequente ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Unit%20Test"},"Unit Tests")," unter Einsatz von Attrappen, da Quellcode anderer Komponenten nicht sichtbar ist. Au\xdferdem steigert solche Codeorganisation die Produktivit\xe4t, weil Komponenten dank ihrer separaten Kontrakte parallel implementiert werden k\xf6nnen. Und schlie\xdflich stellt sich eine physische Isolation gegen den schleichenden Zuwachs an Entropie im Code. Denn wo Bindungen zwischen Komponenten nur via Kontrakt aufgebaut werden k\xf6nnen, ist die Kopplung lose und kontrolliert."),(0,i.kt)("p",null,"Zur Komponentenorientierung geh\xf6ren deshalb nicht nur bin\xe4re, gr\xf6\xdfere Codeeinheiten mit separaten Kontrakten, sondern auch die Entwicklung der Kontrakte vor der Implementation (",(0,i.kt)("em",{parentName:"p"},"Contract-first Design"),"). Denn sobald die Kontrakte definiert sind, die eine Komponente importiert und exportiert, kann die Arbeit an der Komponente unabh\xe4ngig von allen anderen beginnen."),(0,i.kt)("p",null,"Siehe auch unter\xa0",(0,i.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Tools"),"."))}p.isMDXComponent=!0}}]);