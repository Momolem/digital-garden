"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5208],{4137:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>p});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var d=r.createContext({}),l=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(d.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=l(t),h=i,p=c["".concat(d,".").concat(h)]||c[h]||m[h]||a;return t?r.createElement(p,s(s({ref:n},u),{},{components:t})):r.createElement(p,s({ref:n},u))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=h;var o={};for(var d in n)hasOwnProperty.call(n,d)&&(o[d]=n[d]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var l=2;l<a;l++)s[l]=t[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},9714:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var r=t(7462),i=(t(7294),t(4137));const a={title:"Automated Integrationtests",aliases:[]},s=void 0,o={unversionedId:"main/CleanCode/Automated Integrationtests",id:"main/CleanCode/Automated Integrationtests",title:"Automated Integrationtests",description:"tags: #cleancode",source:"@site/docs/main/CleanCode/Automated Integrationtests.md",sourceDirName:"main/CleanCode",slug:"/main/CleanCode/Automated Integrationtests",permalink:"/docs/main/CleanCode/Automated Integrationtests",draft:!1,tags:[],version:"current",frontMatter:{title:"Automated Integrationtests",aliases:[]},sidebar:"main",previous:{title:"Adapter",permalink:"/docs/main/CleanCode/Adapter"},next:{title:"Automated Unit Tests",permalink:"/docs/main/CleanCode/Automated Unit Tests"}},d={},l=[],u={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"tags: #cleancode "),(0,i.kt)("h1",{id:"automated-integrationtests"},"Automated Integrationtests"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nIntegrationstests stellen sicher dass der Code tut was er soll. Diese wiederkehrende T\xe4tigkeit nicht zu automatisieren w\xe4re Zeitverschwendung.")),(0,i.kt)("p",null,"Die fundamentale Voraussetzung f\xfcr jegliche \xc4nderungen am Code haben wir bereits im\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Roter%20Grad"},"Roten Grad"),"\xa0durch den Einsatz eines Versionskontrollsystems gelegt. Wir k\xf6nnen ohne Sorge \xc4nderungen am Code vornehmen, ganze Dateien und Verzeichnisse l\xf6schen, durch das Versionskontrollsystem ist alles wieder abrufbar."),(0,i.kt)("p",null,"Wenn wir nun \xc4nderungen am Code vornehmen, sollten wir uns sicher sein, dass wir dabei nichts kaputt machen. Und diese Sicherheit k\xf6nnen wir nur erlangen, wenn wir nach der \xc4nderung testen, ob die Anwendung sich noch so verh\xe4lt wie zuvor. Diese Tests nach jeder \xc4nderung per Hand durchzuf\xfchren w\xe4re nicht praktikabel, wir m\xfcssen sie automatisieren. Ein gro\xdfes \xdcbel der Softwareentwicklung ist die Angst, bei \xc4nderungen am Code etwas zu \xfcbersehen, ein Detail nicht zu ber\xfccksichtigen, und dadurch einen Fehler zu verursachen in Code der vorher funktionierte. Dabei spielt es in der Regel sogar nicht mal eine Rolle, ob die \xc4nderungen dazu f\xfchren sollen, dass der Code verbessert wird (",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Refaktorisieren"},"Refaktorisieren"),") oder zus\xe4tzliche Anforderungen umgesetzt werden sollen. Solange wir nach Durchf\xfchren einer \xc4nderung nicht sicher sind, dass alles noch so funktioniert wie zuvor, bleibt die Angst. Diese f\xfchrt dazu, dass wir Code im Zweifelsfall so belassen, wie er ist, denn er funktioniert ja. Notwendige Refaktorisierungen werden unterlassen, aus Angst Fehler zu machen."),(0,i.kt)("p",null,"Damit wir uns auch in schon laufenden Projekten (sogenannte\xa0",(0,i.kt)("em",{parentName:"p"},"Brownfield"),"\xa0Projekte, im Gegensatz zu\xa0",(0,i.kt)("em",{parentName:"p"},"Greenfield"),"\xa0\u201eauf der gr\xfcnen Wiese\u201c) dieses Sicherheitsnetz schaffen k\xf6nnen, ben\xf6tigen wir Verfahren, die auf vorhandenen Code angewendet werden k\xf6nnen. Dazu eignen sich automatisierte Integrationstests. Sie setzen entweder ganz oben auf der Benutzerschnittstelle auf und testen die Anwendung durch alle Layer oder setzen weiter unten auf. In jedem Fall werden mehrere Funktionseinheiten im Zusammenspiel getestet."),(0,i.kt)("p",null,"Bevor wir also \xc4nderungen oder Erweiterungen am Code vornehmen, erstellen wir f\xfcr die betroffenen Codebereiche Integrationstests. Dabei k\xf6nnen Tools und Techniken wie WatiN, UI Automation, etc. verwendet werden. W\xfcnschenswert sind nat\xfcrlich auch ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Unit%20Test"},"Unit Tests"),", welche einzelne Funktionseinheiten isoliert testen. Dazu muss der Code allerdings Voraussetzungen erf\xfcllen, die vermutlich nicht immer gegeben sind: der Code muss bereits das\xa0",(0,i.kt)("em",{parentName:"p"}," ",(0,i.kt)("a",{parentName:"em",href:"/docs/main/CleanCode/Single%20Responsibility%20Principle"},"Single Responsibility Principle")),"\xa0ber\xfccksichtigen. Andernfalls sind die Abh\xe4ngigkeiten zwischen den Funktionseinheiten (Komponenten, Klassen oder Methoden) so gro\xdf, dass sie nicht isoliert getestet werden k\xf6nnen. Das Fernziel ist nat\xfcrlich eine Codebasis, bei der ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Unit%20Test"},"Unit Tests")," m\xf6glich sind. Mehr noch: wir werden in Zukunft die Tests vor der Implementierung erstellen (",(0,i.kt)("em",{parentName:"p"},"Test first"),"). Aber um durch Refaktorisierungen dorthin zu gelangen, bedarf es erst der Integrationstests, um sicherzustellen, dass die Anwendung sich noch so verh\xe4lt wie vor der ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Refaktorisieren"},"Refaktorisierung"),"."))}m.isMDXComponent=!0}}]);