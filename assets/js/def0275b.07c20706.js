"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7971],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,g=u["".concat(s,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(g,i(i({ref:n},d),{},{components:t})):r.createElement(g,i({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},964:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(4137));const a={title:"Continuous Integration",aliases:["CI"],tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},i="Continuous Integration",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration",title:"Continuous Integration",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Continuous Integration.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Continuous Integration",aliases:["CI"],tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Continuous Delivery",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Delivery"},next:{title:"Daily Reflection",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Daily Reflection"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"continuous-integration"},"Continuous Integration"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warum?"),"\nAutomatisierung und Zentralisierung der Softwareproduktion machen produktiver und reduzieren das Risiko von Fehlern bei der Auslieferung.")),(0,o.kt)("p",null,"Oft wird die Integration der Softwarekomponenten zeitlich nach hinten geschoben und erfolgt aufwendig und fehleranf\xe4llig \u201eper Hand\u201c. Eigentlich sollte die Software aber zu jedem Zeitpunkt vollst\xe4ndig lauff\xe4hig sein. Mit Continuous Integration bezeichnet man einen Prozess, der daf\xfcr sorgt dass der gesamte Code nach der \xdcbermittlung von \xc4nderungen \xfcbersetzt und getestet wird."),(0,o.kt)("p",null,"Der Continuous Integration Prozess ist vor allem f\xfcr Teams wichtig, denn er sorgt daf\xfcr, dass nach der \xdcbermittlung von \xc4nderungen der gesamte Code \xfcbersetzt und getestet wird, nicht nur der Teil an dem ein Entwickler gerade gearbeitet hat. Die automatisierten Tests sollten von jedem Entwickler ausgef\xfchrt werden bevor er \xc4nderungen in die zentrale ",(0,o.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Version%20Control%20System"},"Versionskontrolle")," \xfcbermittelt. Daran \xe4ndert sich durch Continuous Integration nichts. Um sicherzustellen, dass die Tests tats\xe4chlich ausgef\xfchrt werden und Fehler fr\xfchzeitig erkannt werden, laufen sie in jedem Fall auf dem Continuous Integration Server. Dies entbindet den Entwickler nicht davon die Tests vor dem Commit auszuf\xfchren, schlie\xdflich behindert fehlerhafter Code der in die ",(0,o.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Version%20Control%20System"},"Versionskontrolle")," eingecheckt wurde das gesamte Team, m\xf6glicherweise sogar weitere Teams. So sorgt der Continuous Integration Prozess daf\xfcr dass team\xfcbergreifend sichergestellt wird dass Fehler so fr\xfch wie m\xf6glich erkannt werden."),(0,o.kt)("p",null,"F\xfcr den Continuous Integration Prozess stehen zahlreiche\xa0",(0,o.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Softwaretools"),"\xa0zur Verf\xfcgung. Neben dem kontinuierlichen Build und Test, der sofort erfolgt, wenn \xc4nderungen in die ",(0,o.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Version%20Control%20System"},"Versionskontrolle")," \xfcbertragen werden, k\xf6nnen durch Continuous Integration auch l\xe4nger laufende Prozesse, wie z.B. Datenbanktests, automatisiert werden. Diese werden dann z.B. nur nachts ausgef\xfchrt. Im gr\xfcnen Grad wird lediglich der Build- und Testprozess ber\xfccksichtigt. Das kontinuierliche Setup und Deployment der Software folgt erst sp\xe4ter im\xa0",(0,o.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer%20Grad"},"blauen Grad"),"."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"Martin%20Fowler"},"Martin Fowler")," hat einen sehr guten Artikel zu diesem Thema verfasst, nachzulesen unter\xa0",(0,o.kt)("a",{parentName:"p",href:"http://www.martinfowler.com/articles/continuousIntegration.html"}),(0,o.kt)("a",{parentName:"p",href:"http://www.martinfowler.com/articles/continuousIntegration.html"},"http://www.martinfowler.com/articles/continuousIntegration.html")),(0,o.kt)("p",null,"Siehe auch unter\xa0",(0,o.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Tools"),"."))}p.isMDXComponent=!0}}]);