"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[657],{4137:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>h});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),c=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},d=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(r),p=a,h=u["".concat(s,".").concat(p)]||u[p]||m[p]||i;return r?t.createElement(h,o(o({ref:n},d),{},{components:r})):t.createElement(h,o({ref:n},d))}));function h(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},2077:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var t=r(7462),a=(r(7294),r(4137));const i={title:"Error Measurement",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},o="Error Measurement",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement",title:"Error Measurement",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Error Measurement.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Error Measurement",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Design before Implementation",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Design before Implementation"},next:{title:"Incremental Development",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Incremental Development"}},s={},c=[],d={toc:c},u="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(u,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"error-measurement"},"Error Measurement"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warum?"),"\nNur wer wei\xdf, wie viele Fehler auftreten, kann sein Vorgehen so ver\xe4ndern, dass die Fehlerrate sinkt.")),(0,a.kt)("p",null,"W\xe4hrend der Softwareentwicklung passieren Fehler. Die passieren in allen Phasen: falsch verstandene oder unklar formulierte Anforderungen f\xfchren zu Fehlern genauso wie fehlerhafte Implementierungen. Am Ende ist alles ein Fehler, was dazu f\xfchrt, dass der Kunde eine Software erh\xe4lt, die nicht seinen Anforderungen entspricht. Iteratives Vorgehen und Reflexion sind zwei Bausteine, die dazu dienen, den Prozess zu verbessern. Um jedoch zu erkennen, ob tats\xe4chlich eine Verbesserung eintritt, muss eine Messgr\xf6\xdfe vorliegen, an der man eine Entwicklung zum Besseren \xfcberhaupt ablesen kann."),(0,a.kt)("p",null,"Das Messen der Fehler kann durch Z\xe4hlen oder durch Zeitnahme erfolgen. Dabei steht nicht die Pr\xe4zision im Vordergrund, solange die Messmethode vergleichbare Daten liefert. Die Entwicklungstendenz \xfcber mehrere Iterationen hinweg soll ersichtlich werden. Ferner geht es nicht darum, die Verantwortlichkeit f\xfcr einen Fehler zu kl\xe4ren. Am Ende ist es egal, wer den Fehler verursacht hat, so lange das Team daraus lernt und seinen Prozess verbessert."),(0,a.kt)("p",null,"Welche Fehler sind zu messen? Es sind nicht die Fehler, die w\xe4hrend der Entwicklung auftreten. Die sind nicht zu vermeiden und f\xfchren hoffentlich dahin, dass am Ende einer Iteration ein fehlerfreies Produkt ausgeliefert wird. Vielmehr geht es um die Fehler, die nach einer Iteration zur\xfcckgemeldet werden vom Kunden bzw. seinem Stellvertreter (z.B. ",(0,a.kt)("a",{parentName:"p",href:"Product%20Owner"},"Product Owner")," oder Support). Das sind Fehler, die die Umsetzung neuer Anforderungen behindern. Zu messende Fehler sind also die, die auftreten, wenn man glaubt, dass es sie nicht geben d\xfcrfte ;-) Wann im Prozess ein Team diesen Punkt erreicht und flucht, weil da wieder so ein Fehler der sonstigen Arbeit dazwischenfunkt, ist teamindividuell zu bestimmen."),(0,a.kt)("p",null,"Weiter geht es beim\xa0",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer%20Grad"},"blauen Grad"),"."))}m.isMDXComponent=!0}}]);