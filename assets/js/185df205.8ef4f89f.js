"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7886],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(t),p=i,f=u["".concat(l,".").concat(p)]||u[p]||m[p]||a;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9550:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const a={title:"Principle of Least Astonishment"},o=void 0,s={unversionedId:"main/CleanCode/Principle of Least Astonishment",id:"main/CleanCode/Principle of Least Astonishment",title:"Principle of Least Astonishment",description:"Warum?",source:"@site/docs/main/CleanCode/Principle of Least Astonishment.md",sourceDirName:"main/CleanCode",slug:"/main/CleanCode/Principle of Least Astonishment",permalink:"/docs/main/CleanCode/Principle of Least Astonishment",draft:!1,tags:[],version:"current",frontMatter:{title:"Principle of Least Astonishment"},sidebar:"main",previous:{title:"Partizipation in Professional Events",permalink:"/docs/main/CleanCode/Partizipation in Professional Events"},next:{title:"Prototype",permalink:"/docs/main/CleanCode/Prototype"}},l={},c=[],d={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"#cleancode "),(0,i.kt)("h1",{id:"principle-of-least-astonishment"},"Principle of Least Astonishment"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nWenn sich eine Komponente \xfcberraschenderweise anders verh\xe4lt als erwartet, wird ihre Anwendung unn\xf6tig kompliziert und fehleranf\xe4llig.")),(0,i.kt)("p",null,"Softwareentwicklung ist in hohem Ma\xdfe ein kreativer Prozess. In diesem Prozess ist es wichtig, in den Fluss einzutauchen (engl. Flow). Wenn man diesen Zustand erreicht hat, sprudelt der Code nur so heraus. Jegliche St\xf6rung des Flow f\xfchrt zu Unterbrechungen und letztlich dazu, dass in der zur Verf\xfcgung stehenden Zeit nur wenig Code produziert wird bzw. die Qualit\xe4t des Code nicht optimal ist. Denn nach jeder Unterbrechung muss der Entwickler erst wieder Fahrt aufnehmen und erneut in den Fluss zu kommen. \xdcberraschungen stellen St\xf6rungen dar. Sie f\xfchren zu Unterbrechungen und Fehlern. Dazu ein Beispiel: Ist die Tastenbelegung in der Entwicklungsumgebung so gew\xe4hlt, dass eine \xfcbliche Tastenkombination wie z.B. Ctrl-C eine v\xf6llig andere Bedeutung hat, behindert dies den Entwickler. Ein Entwickler wird sich jedes mal \xe4rgern, wenn er die \u201efalsche\u201c Tastenkombination verwendet. Dies behindert kreatives Arbeiten."),(0,i.kt)("p",null,"Software sollte \xfcberraschungsarm implementiert sein. Wenn eine Abfragemethode namens\xa0",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("inlineCode",{parentName:"em"},"GetValue()")),"\xa0nicht nur einen Wert liefert, sondern gleichzeitig den Zustand des Systems \xe4ndert, wird der Entwickler diese Methode im besten Fall meiden, da er mit b\xf6sen \xdcberraschungen rechnet. Im ung\xfcnstigen Fall f\xe4llt ihm dieses merkw\xfcrdige Verhalten nicht rechtzeitig auf. (Abfragemethoden die den Zustand \xe4ndern, versto\xdfen gegen das\xa0",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"Command%20Query%20Separation"},"Command Query Separation")),"\xa0Prinzip). Die ",(0,i.kt)("a",{parentName:"p",href:"Test-Driven-Development"},"Test-Driven-Development")," f\xf6rdert \xfcberraschungsarme Schnittstellen, da die Schnittstelle aus der Sichtweise ihrer Verwendung entworfen und implementiert wird."))}m.isMDXComponent=!0}}]);