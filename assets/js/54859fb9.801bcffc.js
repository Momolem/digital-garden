"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1923],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>C});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var d=r.createContext({}),s=function(e){var n=r.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(d.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=s(t),p=a,C=u["".concat(d,".").concat(p)]||u[p]||m[p]||i;return t?r.createElement(C,o(o({ref:n},c),{},{components:t})):r.createElement(C,o({ref:n},c))}));function C(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3583:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var r=t(7462),a=(t(7294),t(4137));const i={title:"Boy Scout Rule",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},o="Boy Scout Rule",l={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule",title:"Boy Scout Rule",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Boy Scout Rule.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Boy Scout Rule",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Automated Unit Tests",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests"},next:{title:"Code Coverage Analysis",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Code Coverage Analysis"}},d={},s=[],c={toc:s},u="wrapper";function m(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"boy-scout-rule"},"Boy Scout Rule"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warum?"),"\nJede Besch\xe4ftigung mit einem Gegenstand macht ihn zumindest ein klein wenig besser. Ganz ohne b\xfcrokratische Planung. Fundament und Graswurzelansatz f\xfcr mehr Qualit\xe4t.")),(0,a.kt)("p",null,"Das ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"index")," Wertesystem l\xe4sst sich nicht mit einem Mal etablieren. Daf\xfcr braucht es Zeit. Vor allem, da ein ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/"},"index")," selten auf einer gr\xfcnen Wiese und auch noch allein arbeitet, ist es schwer, die Prinzipien auf eine gesamte Codebasis anzuwenden. Wir glauben daher, dass es wichtig ist, sich nicht zu hohe Ziele zu setzen. Viel realistischer und motivierender ist es, nur kleine Fortschritte anzustreben \u2013 daf\xfcr aber kontinuierliche."),(0,a.kt)("p",null,"Zum Fundament des Clean Code Development geh\xf6rt deshalb f\xfcr uns die Pfadfinderregel. Sie findet sich auch in\xa0",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/index"},"index"),"\xa0und lautet:\xa0"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("em",{parentName:"p"},"Hinterlasse einen Ort immer in einem besseren Zustand als du ihn vorgefunden hast."))),(0,a.kt)("p",null,"Auf die Softwareentwicklung angewandt bedeutet das: ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"index")," hinterlassen Code immer in einem \u201ebesseren Zustand\u201c als sie ihn vorgefunden haben. Nach getaner Arbeit stimmt der Code also mit dem Clean Code Development Wertesystem mehr \xfcberein als vorher."),(0,a.kt)("p",null,"Was ein ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"index")," an ihm daf\xfcr getan hat, ist situations-/codeabh\xe4ngig \u2013 und wird nat\xfcrlich auch durch den Grad bestimmt, an dem er arbeitet. Im ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"0. Roter Grad")," achtet ein ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/"},"index")," z.B. darauf, dass Code, der noch nicht im Repository der Versionsverwaltung war, nun auch dort abgelegt ist. Und er achtet darauf, dass Wiederholungen jeder Art \u2013 also Verletzungen des ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY"),"-Prinzips \u2013 \u201eausgeb\xfcgelt\u201c werden."),(0,a.kt)("p",null,"Wo ein ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"index")," Suboptimalit\xe4ten im Sinne des CCD-Wertesystems feststellt, bem\xfcht er sich also stetig darum, sie zu verbessern. In kleinen Schritten. Und nat\xfcrlich bem\xfcht er sich, Suboptimalit\xe4ten von vornherein zu vermeiden. Wie gesagt: immer auf der Stufe seiner Entwicklung."),(0,a.kt)("p",null,"Diese Maxime steht am Anfang der Entwicklung des Clean Code Developers eingedenk der\xa0",(0,a.kt)("a",{parentName:"p",href:"http://de.wikipedia.org/wiki/Broken-Windows-Theorie"},"Broken Windows Theorie"),". Nach ihr beginnt der Verfall von Qualit\xe4t im allgemeinen Sinn mit Kleinigkeiten, die nur lange genug unbeachtet bleiben."),(0,a.kt)("p",null,"Wenn ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/index"},"index")," jedoch nach der Pfadfinderregel arbeiten, kommt es gar nicht erst zu \u201eBroken Windows\u201c \u2013 vorhandene werden eines nach dem anderen repariert. \u201eRisse und Unebenheiten\u201c im Code schlie\xdft die Pfadfinderregel konsequent auf der Basis des CCD-Wertesystems, sodass sich keine weiteren \u201eAblagerungen\u201c ansammeln k\xf6nnen. Sie wirkt damit proaktiv einer Code-Erosion entgegen. Das halten wir f\xfcr so fundamental, dass wir sie in den roten Grad aufgenommen haben."))}m.isMDXComponent=!0}}]);