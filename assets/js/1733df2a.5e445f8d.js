"use strict";(self.webpackChunkknowledgebase=self.webpackChunkknowledgebase||[]).push([[517],{90600:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(85893),i=t(11151);const r={title:"Automated Unit Tests",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},o="Automated Unit Tests",a={id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests",title:"Automated Unit Tests",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Automated Unit Tests.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests",draft:!1,unlisted:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Automated Unit Tests",tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"cs",previous:{title:"Automated Integrationtests",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Integrationtests"},next:{title:"Boy Scout Rule",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule"}},d={},l=[];function c(e){const n={a:"a",blockquote:"blockquote",h1:"h1",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.h1,{id:"automated-unit-tests",children:["Automated ",(0,s.jsx)(n.a,{href:"/docs/main/CleanCode/CleanCodeDeveloper/Unit%20Test",children:"Unit Tests"})]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Warum?"}),"\nNur automatisierte Tests werden auch wirklich konsequent ausgef\xfchrt. Je punktgenauer sie Code testen, desto besser."]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Im\xa0",(0,s.jsx)(n.a,{href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Orangener%20Grad",children:"Orangenen Grad"}),"\xa0haben wir ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Integration%20Tests.md",children:"Integration Tests"})," eingef\xfchrt, nun geht es um ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Unit%20Test.md",children:"Unit Tests"}),". Im Gegensatz zu ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Integration%20Tests.md",children:"Integrationstests"})," wird bei ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Unit%20Test.md",children:"Unit Tests"})," eine einzelne Funktionseinheit (vor allem Klassen, aber auch Methoden oder Komponenten) isoliert getestet. Dazu ist es erforderlich, diese Funktionseinheit von ihren Abh\xe4ngigkeiten befreien zu k\xf6nnen. Sollen ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Unit%20Test.md",children:"Unit Tests"})," im Nachhinein f\xfcr bestehenden Code erg\xe4nzt werden, sind h\xe4ufig Refaktorisierungen erforderlich. Wir haben durch die ",(0,s.jsx)(n.a,{href:"docs/main/CleanCode/1.%20CleanCodeDeveloper/Integration%20Tests.md",children:"Integrationstests"})," die Sicherheit, dass wir dabei keine Fehler einbauen."]}),"\n",(0,s.jsx)(n.p,{children:"Automatisierte Tests bieten zweifachen Nutzen:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Sie sparen Zeit"}),"\n",(0,s.jsx)(n.li,{children:"Sie nehmen Angst"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Je st\xe4rker eine Codebasis in Ver\xe4nderung begriffen ist, desto eher ist die Zeitersparnis zu sp\xfcren. Denn wo Code sich ver\xe4ndert, muss immer wieder Neues und auch Altes (Regressionstests) getestet werden. Da spart Automatisation einfach Zeit. Und je komplexer der Code, desto gr\xf6\xdfer ist die Angstreduktion. Denn wenn komplexer Code ver\xe4ndert werden soll \u2013 um Funktionalit\xe4t hinzuzuf\xfcgen, ihn zu optimieren oder schlicht zu korrigieren \u2013, da besteht hohe Gefahr, ungewollt Fehler einzuf\xfchren. Kleinschrittige automatisierte Tests decken diese jedoch auf, sodass kein Grund zur Angst besteht, zu \u201everschlimmbessern\u201c."}),"\n",(0,s.jsxs)(n.p,{children:["Siehe auch unter\xa0",(0,s.jsx)(n.a,{href:"https://clean-code-developer.de/weitere-infos/werkzeuge/",children:"Tools"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},11151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var s=t(67294);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);