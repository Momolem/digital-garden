"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[917],{4137:(e,n,r)=>{r.d(n,{Zo:()=>d,kt:()=>f});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function c(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),p=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=p(e.components);return t.createElement(l.Provider,{value:n},e.children)},s="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),s=p(r),u=a,f=s["".concat(l,".").concat(u)]||s[u]||m[u]||o;return r?t.createElement(f,i(i({ref:n},d),{},{components:r})):t.createElement(f,i({ref:n},d))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[s]="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},4514:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var t=r(7462),a=(r(7294),r(4137));const o={title:"Complex Refactorings",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},i="Complex Refactorings",c={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings",title:"Complex Refactorings",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Complex Refactorings.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Complex Refactorings",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Code Reviews",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Code Reviews"},next:{title:"Component Orientation",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation"}},l={},p=[],d={toc:p},s="wrapper";function m(e){let{components:n,...r}=e;return(0,a.kt)(s,(0,t.Z)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"complex-refactorings"},"Complex Refactorings"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Warum?"),"\nEs ist nicht m\xf6glich, Code direkt in der ultimativen Form zu schreiben.")),(0,a.kt)("p",null,"Bereits im",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"roten Grad")," sind einfache ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Refaktorisieren"},"Refaktorisierungen")," eingef\xfchrt worden. Doch\xa0",(0,a.kt)("em",{parentName:"p"},"Umbenennen"),"\xa0und\xa0",(0,a.kt)("em",{parentName:"p"},"Methode extrahieren"),"\xa0reichen nicht aus, um den Code zu verbessern \u2013 oft sind gr\xf6\xdfere Eingriffe erforderlich. Die Einteilung in einfache und komplexe Refaktorisierungen ist sinnvoll, weil komplexe Refaktorisierungen nur mit vorhandenen automatisierten Tests effizient und risikolos zu bewerkstelligen sind. Ohne Tests w\xe4re nach dem ",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Refaktorisieren"},"Refaktorisieren")," nicht bekannt, ob der Code immer noch korrekt ist."),(0,a.kt)("p",null,"Siehe auch unter\xa0",(0,a.kt)("a",{parentName:"p",href:"http://refactoring-legacy-code.net/category/komplexe-refactorings/"},"refactoring-legacy-code.net"),"\xa0sowie unter\xa0",(0,a.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Tools"),"."),(0,a.kt)("p",null,"Weiter geht es beim\xa0",(0,a.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gr%C3%BCner%20Grad"},"gr\xfcnen Grad")))}m.isMDXComponent=!0}}]);