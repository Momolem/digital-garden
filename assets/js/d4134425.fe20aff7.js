"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4930],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6448:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=t(7462),i=(t(7294),t(4137));const o={title:"Dependency Inversion Principle"},a=void 0,s={unversionedId:"main/CleanCode/Dependency Inversion Principle",id:"main/CleanCode/Dependency Inversion Principle",title:"Dependency Inversion Principle",description:"Punktgenaues Testen setzt Isolation von Klassen voraus. Isolation entsteht, wenn Klassen keine Abh\xe4ngigkeiten von Implementationen mehr enthalten \u2013 weder zur Laufzeit, noch zur \xdcbersetzungszeit. Konkrete Abh\xe4ngigkeiten sollten deshalb so sp\xe4t wie m\xf6glich entschieden werden. Am besten zur Laufzeit.",source:"@site/docs/main/CleanCode/Dependency Inversion Principle.md",sourceDirName:"main/CleanCode",slug:"/main/CleanCode/Dependency Inversion Principle",permalink:"/docs/main/CleanCode/Dependency Inversion Principle",draft:!1,tags:[],version:"current",frontMatter:{title:"Dependency Inversion Principle"},sidebar:"main",previous:{title:"Decorator",permalink:"/docs/main/CleanCode/Decorator"},next:{title:"Design Patterns",permalink:"/docs/main/CleanCode/Design Patterns"}},l={},c=[],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"#cleancode "),(0,i.kt)("h1",{id:"dependency-inversion-principle-dip"},"Dependency Inversion Principle (DIP)"),(0,i.kt)("p",null,":::question ",(0,i.kt)("strong",{parentName:"p"},"Warum?")),(0,i.kt)("p",null,"Punktgenaues Testen setzt Isolation von Klassen voraus. Isolation entsteht, wenn Klassen keine Abh\xe4ngigkeiten von Implementationen mehr enthalten \u2013 weder zur Laufzeit, noch zur \xdcbersetzungszeit. Konkrete Abh\xe4ngigkeiten sollten deshalb so sp\xe4t wie m\xf6glich entschieden werden. Am besten zur Laufzeit.\n:::"),(0,i.kt)("p",null,"Auch das Dependency Inversion Principle (",(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view"},"DIP"),") ist ein\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/SOLID"},"SOLID"),"\xa0Prinzip. Es besagt folgendes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"High-Level Klassen sollen nicht von Low-Level Klassen abh\xe4ngig sein, sondern beide von Interfaces."),(0,i.kt)("li",{parentName:"ul"},"Interfaces sollen nicht von Details abh\xe4ngig sein, sondern Details von Interfaces.")),(0,i.kt)("p",null,"Verwendet eine High-Level Klasse eine Low-Level Klasse unmittelbar, so ergibt sich eine starke Kopplung zwischen beiden. Sp\xe4testens beim Versuch, die High-Level Klasse isoliert zu testen, wird man auf Schwierigkeiten sto\xdfen. Aus diesem Grund sollte die High-Level Klasse von einem Interface abh\xe4ngig sein, das wiederum von der Low-Level Klasse implementiert wird. So kann die Low-Level Klasse im Unit Test durch ein\xa0",(0,i.kt)("em",{parentName:"p"},"Mockup"),"\xa0ersetzt werden."),(0,i.kt)("p",null,"Um zur Laufzeit die invertierte, abstrakte Abh\xe4ngigkeit mit einem konkreten Objekt aufzul\xf6sen, bieten sich im Prinzip drei M\xf6glichkeiten:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"mittels Konstruktorparameter \u201eper Hand\u201c"),(0,i.kt)("li",{parentName:"ul"},"Einsatz eines Inversion of Control Containers (",(0,i.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/Inversion%20of%20Control%20Container"},"IoC")," Container) wie etwa Castle Windsor"),(0,i.kt)("li",{parentName:"ul"},"Dependency Lookup")),(0,i.kt)("p",null,"Im\xa0",(0,i.kt)("a",{parentName:"p",href:"https://www.notion.so/Clean-Code-Developer-bb88b9ccb7d040c4a45f408e73b9d1c2"},"gelben Grad"),"\xa0injizieren wir die Abh\xe4ngigkeiten zun\xe4chst nur \xfcber die Parameter der Konstruktoren. Dies ist anfangs die einfachste L\xf6sung und funktioniert mit einer handvoll Klassen ganz gut. Sp\xe4ter im\xa0",(0,i.kt)("a",{parentName:"p",href:"https://www.notion.so/Clean-Code-Developer-bb88b9ccb7d040c4a45f408e73b9d1c2"},"gr\xfcnen Grad"),"\xa0nutzen wir einen ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Inversion%20of%20Control%20Container"},"IoC")," Container und Dependency Lookup."))}d.isMDXComponent=!0}}]);