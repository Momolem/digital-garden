"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4665],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),c=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},f=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=c(t),f=r,m=u["".concat(s,".").concat(f)]||u[f]||p[f]||a;return t?i.createElement(m,l(l({ref:n},d),{},{components:t})):i.createElement(m,l({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=f;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2145:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var i=t(7462),r=(t(7294),t(4137));const a={title:"Single Level of Abstraction",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},l="Single Level of Abstraction (SLA)",o={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction",title:"Single Level of Abstraction",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Single Level of Abstraction.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Single Level of Abstraction",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Separation of Concerns",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns"},next:{title:"Single Responsibility Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,i.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"single-level-of-abstraction-sla"},"Single Level of Abstraction (SLA)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warum?"),"\nDie Einhaltung eines Abstraktionsniveaus f\xf6rdert die Lesbarkeit")),(0,r.kt)("p",null,"Eine Codezeile kann auf verschiedenen Abstraktionsniveaus liegen. Die Zuweisung eines Wertes an eine Variable liegt auf einem niedrigeren Abstraktionsniveau als etwa ein Methodenaufruf. Schlie\xdflich kann sich hinter dem Methodenaufruf weit mehr Logik befinden als in der Zuweisung einer Variable. Selbst Methodenaufrufe k\xf6nnen auf unterschiedlichen Abstraktionsniveaus stehen. Der Aufruf einer Methode aus einem Framework steht auf einem anderen Niveau, als der Aufruf einer Methode der Anwendung."),(0,r.kt)("p",null,"Damit Code gut zu lesen und zu verstehen ist, sollte in einer Methode nur ein Abstraktionsniveau verwendet werden. Andernfalls f\xe4llt es dem Leser schwer, Essentielles von Details zu unterscheiden. Wenn Bitpfriemeleien erforderlich sind, sollten diese nicht mit dem Aufruf von Methoden vermischt werden."),(0,r.kt)("p",null,"Hilfreich als Analogie ist der Blick auf Artikel in der Tageszeitung: dort steht zu oberst das Allerwichtigste, die \xdcberschrift. Aus ihr sollte in groben Z\xfcgen hervorgehen, wovon der Artikel handelt. Im ersten Satz des Artikels wird dies auf einem hohen Abstraktionsniveau beschrieben. Je weiter man im Artikel fortschreitet, desto mehr Details tauchen auf. So k\xf6nnen wir auch unseren Code strukturieren. Der Name der Klasse ist die \xdcberschrift. Dann folgen die \xf6ffentlichen Methoden auf hohem Abstraktionsniveau. Diese rufen m\xf6glicherweise Methoden auf niedrigerem Niveau auf, bis zuletzt die \u201eBitpfriemelmethoden\u201c \xfcbrig bleiben. Durch diese Einteilung kann ich als Leser der Klasse entscheiden, welchen Detaillierungsgrad ich mir ansehen m\xf6chte. Interessiert mich nur grob, wie die Klasse arbeitet, brauche ich mir nur die \xf6ffentlichen Methoden anzuschauen. In ihnen wird die Funktionalit\xe4t auf einem hohen Abstraktionsniveau gel\xf6st. Interessieren mich weitere Details, kann ich tiefer einsteigen und mir die privaten Methoden ansehen."))}p.isMDXComponent=!0}}]);