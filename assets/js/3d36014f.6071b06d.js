"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4764],{4137:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,g=m["".concat(s,".").concat(u)]||m[u]||d[u]||i;return a?n.createElement(g,o(o({ref:t},p),{},{components:a})):n.createElement(g,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},2360:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=a(7462),r=(a(7294),a(4137));const i={title:"Design Patterns",aliases:["Entwurfsmuster"],tags:["cleancode/designpatterns","cleancode/refactoring"]},o="Design Patterns",l={unversionedId:"main/CleanCode/DesignPatterns/index",id:"main/CleanCode/DesignPatterns/index",title:"Design Patterns",description:"Design patterns\xa0are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code",source:"@site/docs/main/CleanCode/0. DesignPatterns/index.md",sourceDirName:"main/CleanCode/0. DesignPatterns",slug:"/main/CleanCode/DesignPatterns/",permalink:"/docs/main/CleanCode/DesignPatterns/",draft:!1,tags:[{label:"cleancode/designpatterns",permalink:"/docs/tags/cleancode-designpatterns"},{label:"cleancode/refactoring",permalink:"/docs/tags/cleancode-refactoring"}],version:"current",frontMatter:{title:"Design Patterns",aliases:["Entwurfsmuster"],tags:["cleancode/designpatterns","cleancode/refactoring"]},sidebar:"main",previous:{title:"Clean Code",permalink:"/docs/main/CleanCode/"},next:{title:"Abstract Factory",permalink:"/docs/main/CleanCode/DesignPatterns/Abstract Factory"}},s={},c=[{value:"Creational",id:"creational",level:2},{value:"Structural",id:"structural",level:2},{value:"Behavioral",id:"behavioral",level:2},{value:"Source",id:"source",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"design-patterns"},"Design Patterns"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Design patterns"),"\xa0are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code"),(0,r.kt)("h2",{id:"creational"},"Creational"),(0,r.kt)("p",null,"These patterns provide various object creation mechanisms, which increase flexibility and reuse of existing code."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Factory"},"Factory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Abstract%20Factory"},"Abstract Factory")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Builder"},"Builder")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Prototype"},"Prototype")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Singleton"},"Singleton"))),(0,r.kt)("h2",{id:"structural"},"Structural"),(0,r.kt)("p",null,"These patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Adapter"},"Adapter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Bridge"},"Bridge")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Composite"},"Composite")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Decorator"},"Decorator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Facade"},"Facade")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Flyweight"},"Flyweight")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Proxy"},"Proxy"))),(0,r.kt)("h2",{id:"behavioral"},"Behavioral"),(0,r.kt)("p",null,"These patterns are concerned with algorithms and the assignment of responsibilities between objects."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Chain%20of%20Responsibility"},"Chain of Responsibility")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Command"},"Command")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Iterator"},"Iterator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Mediator"},"Mediator")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Memento"},"Memento")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Observer"},"Observer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/State"},"State")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Strategy"},"Strategy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Template%20Method"},"Template Method")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/DesignPatterns/Visitor"},"Visitor"))),(0,r.kt)("h2",{id:"source"},"Source"),(0,r.kt)("p",null,"The initial Version of the listed Design Pattern pages will be a copy of ",(0,r.kt)("a",{parentName:"p",href:"https://refactoring.guru/design-patterns"},"Refactoring Guru")))}d.isMDXComponent=!0}}]);