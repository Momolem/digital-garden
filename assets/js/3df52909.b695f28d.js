"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2966],{5610:e=>{e.exports=JSON.parse('{"label":"cleancode/ccd","permalink":"/docs/tags/cleancode-ccd","allTagsPath":"/docs/tags","count":52,"items":[{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Integrationtests","title":"Automated Integrationtests","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Integrationtests"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests","title":"Automated Unit Tests","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Automated Unit Tests"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization","title":"Beware of Premature Optimization","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Beware of Premature Optimization"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/Blauer Grad","title":"Blauer Grad","description":"Prinzipien","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule","title":"Boy Scout Rule","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Boy Scout Rule"},{"id":"main/CleanCode/CleanCodeDeveloper/CleanCodeDeveloper","title":"Clean Code Developer","description":"Die Grade","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Code Coverage Analysis","title":"Code Coverage Analysis","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Code Coverage Analysis"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Code Reviews","title":"Code Reviews","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Code Reviews"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings","title":"Complex Refactorings","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Complex Refactorings"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation","title":"Component Orientation","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Component Orientation"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Delivery","title":"Continuous Delivery","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Delivery"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration","title":"Continuous Integration","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Continuous Integration"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Daily Reflection","title":"Daily Reflection","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Daily Reflection"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency Inversion Principle","title":"Dependency Inversion Principle","description":"Punktgenaues Testen setzt Isolation von Klassen voraus. Isolation entsteht, wenn Klassen keine Abh\xe4ngigkeiten von Implementationen mehr enthalten \u2013 weder zur Laufzeit, noch zur \xdcbersetzungszeit. Konkrete Abh\xe4ngigkeiten sollten deshalb so sp\xe4t wie m\xf6glich entschieden werden. Am besten zur Laufzeit.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency Inversion Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp","title":"Design and Implementation Don\'t Overlapp","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Design and Implementation Dont Overlapp"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Design before Implementation","title":"Design before Implementation","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Design before Implementation"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY","title":"DRY","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement","title":"Error Measurement","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Error Measurement"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour Composition over Inheritance","title":"Favour Composition over Inheritance","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour Composition over Inheritance"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/Gelber Grad","title":"Gelber Grad","description":"Prinzipien","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gelber Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/Gr\xfcner Grad","title":"Gr\xfcner Grad","description":"Prinzipien","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gr\xfcner Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Implementation Reflects Design","title":"Implementation Reflects Design","description":"tags: #cleancode","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Implementation Reflects Design"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Incremental Development","title":"Incremental Development","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Incremental Development"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle","title":"Information Hiding Principle","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information Hiding Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)","title":"Integration Operation Segregation Principle (IOSP)","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration Operation Segregation Principle (IOSP)"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle","title":"Interface Segragation Principle","description":"Leistungsbeschreibungen, die unabh\xe4ngig von einer konkreten Erf\xfcllung sind, machen unabh\xe4ngig.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface Segragation Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Inversion of Control Container","title":"Inversion of Control Container","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Inversion of Control Container"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Issue Tracking","title":"Issue Tracking","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Issue Tracking"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Iterative Development","title":"Iterative Development","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Iterative Development"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS","title":"KISS","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter","title":"Law of Demeter","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law of Demeter"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Liskov Substitution Principle","title":"Liskov Substitution Principle","description":"Wer mit Erben zu tun hat, m\xf6chte keine \xdcberraschungen erleben, wenn er mit Erblassern vertraut ist.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Liskov Substitution Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups","title":"Mockups","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Open Closed Principle","title":"Open Closed Principle","description":"Weil das Risiko, durch neue Features ein bisher fehlerfreies System zu instabilisieren, so gering wie m\xf6glich gehalten werden sollte.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Open Closed Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/Orangener Grad","title":"Orangener Grad","description":"Prinzipien","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Orangener Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Partizipation in Professional Events","title":"Partizipation in Professional Events","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Partizipation in Professional Events"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle of Least Astonishment","title":"Principle of Least Astonishment","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle of Least Astonishment"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Read, Read, Read","title":"Read, Read, Read","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Read, Read, Read"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Root Cause Analysis","title":"Root Cause Analysis","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Root Cause Analysis"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/Roter Grad","title":"Roter Grad","description":"Prinzipien","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns","title":"Separation of Concerns","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation of Concerns"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Share Experience","title":"Share Experience","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Share Experience"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings","title":"Simple Refactorings","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Simple Refactorings"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction","title":"Single Level of Abstraction","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Level of Abstraction"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle","title":"Single Responsibility Principle","description":"Fokus erleichtert das Verst\xe4ndnis. Eine Klasse mit genau einer Aufgabe ist verst\xe4ndlicher als ein Gemischtwarenladen.","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single Responsibility Principle"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions","title":"Source Code Conventions","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Statical Code Analysis","title":"Statical Code Analysis","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Statical Code Analysis"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask","title":"Tell, don\'t ask","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Test First","title":"Test First","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Test First"},{"id":"main/CleanCode/CleanCodeDeveloper/Praktiken/Version Control System","title":"Version Control System","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Version Control System"},{"id":"main/CleanCode/CleanCodeDeveloper/Grade/5 Wei\xdfer Grad","title":"Wei\xdfer Grad","description":"Vereinigung aller Prinzipien und Praktiken","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Grade/5 Wei\xdfer Grad"},{"id":"main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It","title":"You Ain\'t Gonna Need It","description":"Warum?","permalink":"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It"}]}')}}]);