"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5230],{4137:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(t),m=i,g=p["".concat(s,".").concat(m)]||p[m]||u[m]||a;return t?r.createElement(g,l(l({ref:n},c),{},{components:t})):r.createElement(g,l({ref:n},c))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,l=new Array(a);l[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var d=2;d<a;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1670:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var r=t(7462),i=(t(7294),t(4137));const a={title:"Tell, don't ask",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},l="Tell, don\u2019t ask",o={unversionedId:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask",id:"main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask",title:"Tell, don't ask",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Prinzipien/Tell, dont ask.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Prinzipien",slug:"/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell, dont ask",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/principle",permalink:"/docs/tags/cleancode-ccd-principle"}],version:"current",frontMatter:{title:"Tell, don't ask",aliases:null,tags:["cleancode","cleancode/ccd","cleancode/ccd/principle"]},sidebar:"main",previous:{title:"Source Code Conventions",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Source Code Conventions"},next:{title:"You Ain't Gonna Need It",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/You Aint Gonna Need It"}},s={},d=[],c={toc:d},p="wrapper";function u(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"tell-dont-ask"},"Tell, don\u2019t ask"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nHohe ",(0,i.kt)("a",{parentName:"p",href:"Koh%C3%A4sion"},"Koh\xe4sion")," und lose Kopplung sind Tugenden. \xd6ffentliche Zustandsdetails einer Klasse widersprechen dem.")),(0,i.kt)("p",null,"Etwas provokant formuliert, sollten Klassen keine Property Getter haben. Diese verf\xfchren den Verwender einer Klasse dazu, anhand von Werten, die ein Objekt liefert, Entscheidungen zu treffen. Statt also dem Objekt mitzuteilen, was es tun soll, wird es befragt, um dann von au\xdfen Betrachtungen \xfcber den internen Zustand des Objektes anzustellen."),(0,i.kt)("p",null,"Eines der Kernprinzipien der ",(0,i.kt)("a",{parentName:"p",href:"OOP"},"OOP")," lautet\xa0",(0,i.kt)("em",{parentName:"p"},(0,i.kt)("a",{parentName:"em",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information%20Hiding%20Principle"},"Information Hiding Principle")),"\xa0(siehe dazu auch im\xa0",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gelber%20Grad"},"gelben Grad"),"). Keine Klasse soll Details nach au\xdfen tragen, aus denen hervorgeht, wie sie intern implementiert ist. Ben\xf6tigt eine Klasse f\xfcr ihre Arbeit einen internen Zustand, wird dieser typischerweise in einem internen Feld abgelegt. Wenn nun dieser Wert auch nach au\xdfen sichtbar ist, werden Verwender verleitet, diesen eigentlich internen Zustand des Objektes f\xfcr eigene Entscheidungen heranzuziehen. Dadurch wird die Klasse schnell zur reinen Datenhaltung degradiert. Eine Implementierung, bei der einem Objekt mitgeteilt wird, was es tun soll, ist in jedem Fall vorzuziehen. Dadurch muss es den Verwender nicht mehr interessieren, wie die Klasse die Aufgabe intern bewerkstelligt."),(0,i.kt)("p",null,"Als Ergebnis des\xa0",(0,i.kt)("a",{parentName:"p",href:"http://www.pragprog.com/articles/tell-dont-ask"},"Tell don\u2019t ask"),"\xa0Prinzips entstehen Objekte mit Verhalten statt \u201edummer\u201c Datenhaltungsobjekte. Das Zusammenspiel der Objekte ist lose gekoppelt, da die Objekte keine Annahmen \xfcber die kollaborierenden Objekte machen m\xfcssen. Aber nicht nur das! Wenn Objekte ihren Zustand nicht ver\xf6ffentlichen, behalten sie die Entscheidungshoheit. Die Koh\xe4sion des entscheidenden Codes w\xe4chst damit, weil er an einem Ort zusammengelegt wird."),(0,i.kt)("p",null,"Ein typisches Codebeispiel ist im folgenden zu sehen. Statt hier zun\xe4chst zu fragen, ob im Logging die Tracemeldungen aktiviert sind (Ask), sollte die Logging Bibliothek direkt angewiesen werden, die Tracemeldung auszugeben (Tell). Die Bibliothek soll dann intern selbst entscheiden, ob die Meldung geloggt wird oder nicht."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"if (_logger.Trace()) {\n    _logger.TraceMsg(\u201e\u2026 eine Meldung\u2026 \u201e);\n}\n")))}u.isMDXComponent=!0}}]);