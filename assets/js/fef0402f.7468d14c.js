"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1541],{4137:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>k});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=s(t),m=o,k=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return t?r.createElement(k,i(i({ref:n},p),{},{components:t})):r.createElement(k,i({ref:n},p))}));function k(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c[u]="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9793:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>c,toc:()=>s});var r=t(7462),o=(t(7294),t(4137));const a={title:"Mockups",aliases:["Stub","Dummy","Fake"],tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},i="Mockups",c={unversionedId:"main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups",id:"main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups",title:"Mockups",description:"Warum?",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/Praktiken/Mockups.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper/Praktiken",slug:"/main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Mockups",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"},{label:"cleancode/ccd/practic",permalink:"/docs/tags/cleancode-ccd-practic"}],version:"current",frontMatter:{title:"Mockups",aliases:["Stub","Dummy","Fake"],tags:["cleancode","cleancode/ccd","cleancode/ccd/practic"]},sidebar:"main",previous:{title:"Liskov Substitution Principle",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Liskov Substitution Principle"},next:{title:"Partizipation in Professional Events",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Partizipation in Professional Events"}},l={},s=[],p={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"mockups"},"Mockups"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Warum?"),"\nOhne Attrappen keine einfach kontrollierbaren Tests.")),(0,o.kt)("p",null,"In der Regel verwenden Komponenten andere Komponenten. Will man eine Komponente isoliert testen, m\xfcssen diese Abh\xe4ngigkeiten abgetrennt werden. Dabei interessiert uns nun ausschlie\xdflich die Funktionalit\xe4t der zu testenden Komponente (",(0,o.kt)("em",{parentName:"p"},"System Under Test (SUT)"),"). Und es interessiert uns, wie die Komponente mit den anderen interagiert."),(0,o.kt)("p",null,"Beim Isolieren verwenden wir sogenannte Mockups. Diese werden anstelle der echten Komponenten verwendet. So interagiert das System Under Test w\xe4hrend der Tests mit gut kontrollierbaren Attrappen statt mit realen Komponenten."),(0,o.kt)("p",null,"Die Literatur kennt noch andere Bezeichnungen f\xfcr Attrappen wie\xa0",(0,o.kt)("em",{parentName:"p"},"Stub"),",\xa0",(0,o.kt)("em",{parentName:"p"},"Dummy"),"\xa0oder\xa0",(0,o.kt)("em",{parentName:"p"},"Fake"),", die teilweise synonym zu Mockup benutzt werden, aber durchaus f\xfcr\xa0",(0,o.kt)("a",{parentName:"p",href:"http://martinfowler.com/articles/mocksArentStubs.html"},"unterschiedliche Funktionsweisen"),"\xa0stehen. Bevor man ein Mock Framework wie z.B.\xa0",(0,o.kt)("a",{parentName:"p",href:"https://hibernatingrhinos.com/oss/rhino-mocks"},"Rhino Mocks"),"\xa0verwendet, sollte man ein Mockup zun\xe4chst \u201eper Hand\u201c implementieren. Dies hilft, den Mechanismus zu verstehen."),(0,o.kt)("p",null,"Siehe auch unter\xa0",(0,o.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Tools"),"."))}d.isMDXComponent=!0}}]);