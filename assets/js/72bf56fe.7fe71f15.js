"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1225],{4137:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>p});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=u(t),m=i,p=c["".concat(l,".").concat(m)]||c[m]||h[m]||a;return t?r.createElement(p,s(s({ref:n},d),{},{components:t})):r.createElement(p,s({ref:n},d))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,s=new Array(a);s[0]=m;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var u=2;u<a;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},1285:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>u});var r=t(7462),i=(t(7294),t(4137));const a={title:"Iterative Development",aliases:[]},s=void 0,o={unversionedId:"main/CleanCode/Iterative Development",id:"main/CleanCode/Iterative Development",title:"Iterative Development",description:"tags: #cleancode",source:"@site/docs/main/CleanCode/Iterative Development.md",sourceDirName:"main/CleanCode",slug:"/main/CleanCode/Iterative Development",permalink:"/docs/main/CleanCode/Iterative Development",draft:!1,tags:[],version:"current",frontMatter:{title:"Iterative Development",aliases:[]},sidebar:"main",previous:{title:"Issue Tracking",permalink:"/docs/main/CleanCode/Issue Tracking"},next:{title:"Iterator",permalink:"/docs/main/CleanCode/Iterator"}},l={},u=[],d={toc:u},c="wrapper";function h(e){let{components:n,...t}=e;return(0,i.kt)(c,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"tags: #cleancode "),(0,i.kt)("h1",{id:"iterative-development"},"Iterative Development"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"Warum?"),"\nFrei nach von Clausewitz: Kein Entwurf, keine Implementation \xfcberlebt den Kontakt mit dem Kunden. Softwareentwicklung tut daher gut daran, ihren Kurs korrigieren zu k\xf6nnen.")),(0,i.kt)("p",null,"Nat\xfcrlich schreitet Softwareentwicklung immer von einer Planung \xfcber die Implementation zu einem Test durch den Kunden voran. Irrig ist allerdings die Annahme, ein Projekt k\xe4me mit einer Planungsphase und einer Implementationsphase und einer Kundentestphase aus. Das funktioniert \u2013 wenn \xfcberhaupt \u2013 nur in trivialen Szenarien, wo in der Planungsphase alle Anforderungen bekannt sind. In realen Projekten jedoch liefert jede Phase Erkenntnisse f\xfcr vorhergehende Phasen. Allemal durch den Kundentest ergeben sich Konsequenzen f\xfcr die Planung und Implementation."),(0,i.kt)("p",null,"Solche Erkenntnisse k\xf6nnen allerdings nur Einfluss auf ein Projekt nehmen, wenn das Vorgehen nicht linear ist. Wenn es von einer sp\xe4teren Phase keinen Weg zur\xfcck zu einer fr\xfcheren Phase gibt, ist Feedback nutzlos."),(0,i.kt)("p",null,"Um Feedback in ein Softwareprodukt einflie\xdfen lassen zu k\xf6nnen, muss der Entwicklungsprozess Schleifen enthalten. Allemal die Schleife von der Kundentestphase zur\xfcck zur Planung ist n\xf6tig. Das hei\xdft, Softwareentwicklung kann nur iterativ, also in mehreren Durchl\xe4ufen, \xfcber den Anforderungskatalog des Kunden stattfinden. Wer versucht, \u201emit einem Mal\u201c (big bang) auszuliefern, handelt dieser Erkenntnis zuwider. Der Softwareentwicklungsprozes ist vielmehr so zu planen, dass er sich durch die Anforderungen \u201ein kleinen Happen durchbei\xdft\u201c. Jeder dieser Happen sollte nicht gr\xf6\xdfer sein, als dass der Durchlauf von Planung bis Kundentest mehr als 2-4 Wochen dauert. Nur dann kommt das Feedback vom Kunden h\xe4ufig genug, um nicht allzu lange in der Umsetzung in die Irre zu laufen."),(0,i.kt)("p",null,"Softwareentwicklung ist damit ein Lernprozess. In seinem Verlauf lernt das Projektteam etwas \xfcber die Anforderungen des Kunden. Es h\xf6rt ihm zu, plant, implementiert, und h\xe4ndigt eine Softwareversion aus, die das Verst\xe4ndnis des Geh\xf6rten widerspiegelt. Dann h\xf6rt das Team wieder zu, plant weiter/erneut nach den aktuellen Erkenntnissen usw. usf. immer im Kreis. Iteration f\xfcr Iteration. Manchmal wird etwas aus einer fr\xfcheren Iteration verfeinert, manchmal Neues hinzugef\xfcgt."),(0,i.kt)("p",null,"Doch nicht nur die Entwicklung einer Software ist ein Lernprozess. Lernen sollte auch auf organisatorischer Ebene stattfinden. Das Team sollte nicht nur \xfcber den Kunden etwas lernen, sondern auch \xfcber sich selbst. Deshalb sollte es auch immer wieder \u201eHaltepunkte\u201c geben, an denen das Team \xfcber sein Vorgehen reflektiert. Die Erkenntnisse aus solcher Retrospektive flie\xdfen dann ein in die n\xe4chste Iteration der organisatorischen Entwicklung. Hier schlie\xdft der blaue Grad an den roten Grad an, zu dem die t\xe4gliche pers\xf6nliche Reflexion geh\xf6rt."),(0,i.kt)("p",null,"Nat\xfcrlich muss jede Iteration auch ein Ende haben. Und damit man wei\xdf ob man fertig ist, muss vorher klar definiert sein, was in der Iteration erreicht werden soll. Die Erreichbarkeit von Zielen kann immer nur gesch\xe4tzt werden, auch dabei hilft die Reflexion, um die Sch\xe4tzungen schrittweise soweit zu verbessern, dass sie f\xfcr die Planung ausreichend genau sind. Doch wann ist das vorher definierte Ziel erreicht?\xa0",(0,i.kt)("a",{parentName:"p",href:"http://www.hanselminutes.com/119/what-is-done-a-conversation-with-scrum-co-creator-ken-schwaber"},"\u201aWhat is done?\u2018"),"\xa0Oberstes Ziel ist die Lieferung funktionsf\xe4higer Software an unsere Kunden. Folglich kann das Ziel nur erreicht sein wenn wir auslieferungsfertige Software produziert haben. Das bedeutet insbesondere, dass die Software getestet ist und dass sie per Setup installiert werden kann. Durch ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/CleanCode/Continuous%20Integration"},"Continuous Integration")," stellen wir dies kontinuierlich sicher. Keinesfalls d\xfcrfen wir kurz vor Ende einer Iteration entscheiden, dass ein Ziel erreicht ist, obwohl noch nicht alle Tests abgeschlossen sind."),(0,i.kt)("p",null,"Siehe auch unter\xa0",(0,i.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/weitere-infos/werkzeuge/"},"Tools"),"."))}h.isMDXComponent=!0}}]);