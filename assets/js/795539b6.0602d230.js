"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4705],{4137:(e,n,i)=>{i.d(n,{Zo:()=>u,kt:()=>p});var t=i(7294);function r(e,n,i){return n in e?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e}function a(e,n){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),i.push.apply(i,t)}return i}function l(e){for(var n=1;n<arguments.length;n++){var i=null!=arguments[n]?arguments[n]:{};n%2?a(Object(i),!0).forEach((function(n){r(e,n,i[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(i,n))}))}return e}function s(e,n){if(null==e)return{};var i,t,r=function(e,n){if(null==e)return{};var i,t,r={},a=Object.keys(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||(r[i]=e[i]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(t=0;t<a.length;t++)i=a[t],n.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var o=t.createContext({}),d=function(e){var n=t.useContext(o),i=n;return e&&(i="function"==typeof e?e(n):l(l({},n),e)),i},u=function(e){var n=d(e.components);return t.createElement(o.Provider,{value:n},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var i=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=d(i),m=r,p=c["".concat(o,".").concat(m)]||c[m]||h[m]||a;return i?t.createElement(p,l(l({ref:n},u),{},{components:i})):t.createElement(p,l({ref:n},u))}));function p(e,n){var i=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s[c]="string"==typeof e?e:r,l[1]=s;for(var d=2;d<a;d++)l[d]=i[d];return t.createElement.apply(null,l)}return t.createElement.apply(null,i)}m.displayName="MDXCreateElement"},2174:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var t=i(7462),r=(i(7294),i(4137));const a={title:"Clean Code Developer",aliases:["CCD"],tags:["cleancode","cleancode/ccd"]},l="Clean Code Developer",s={unversionedId:"main/CleanCode/CleanCodeDeveloper/index",id:"main/CleanCode/CleanCodeDeveloper/index",title:"Clean Code Developer",description:"Die Grade",source:"@site/docs/main/CleanCode/1. CleanCodeDeveloper/index.md",sourceDirName:"main/CleanCode/1. CleanCodeDeveloper",slug:"/main/CleanCode/CleanCodeDeveloper/",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/",draft:!1,tags:[{label:"cleancode",permalink:"/docs/tags/cleancode"},{label:"cleancode/ccd",permalink:"/docs/tags/cleancode-ccd"}],version:"current",frontMatter:{title:"Clean Code Developer",aliases:["CCD"],tags:["cleancode","cleancode/ccd"]},sidebar:"main",previous:{title:"Visitor",permalink:"/docs/main/CleanCode/DesignPatterns/Visitor"},next:{title:"Roter Grad",permalink:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter Grad"}},o={},d=[{value:"Die Grade",id:"die-grade",level:2},{value:"Wertesystem",id:"wertesystem",level:2},{value:"Wandelbarkeit",id:"wandelbarkeit",level:3},{value:"Korrektheit",id:"korrektheit",level:3},{value:"Produktionseffizienz",id:"produktionseffizienz",level:3},{value:"Kontinuierliche Verbesserung",id:"kontinuierliche-verbesserung",level:3},{value:"Prinzipien und Praktiken",id:"prinzipien-und-praktiken",level:3},{value:"Prinzipien",id:"prinzipien",level:4},{value:"Praktiken",id:"praktiken",level:4},{value:"Die Tugenden",id:"die-tugenden",level:2},{value:"Prinzipielles",id:"prinzipielles",level:3},{value:"1. Sch\xe4tze Variation (Value Variation (VV))",id:"1-sch\xe4tze-variation-value-variation-vv",level:4},{value:"2. Tue nur das N\xf6tigste (Do Only What\xb4s Neccessary (DOWN))",id:"2-tue-nur-das-n\xf6tigste-do-only-whats-neccessary-down",level:4},{value:"3. Isoliere Aspekte (Isolate Aspects (IA))",id:"3-isoliere-aspekte-isolate-aspects-ia",level:4},{value:"4. Minimiere Abh\xe4ngigkeiten (Minimize Dependencies (MD))",id:"4-minimiere-abh\xe4ngigkeiten-minimize-dependencies-md",level:4},{value:"5. Halte Versprechen ein (Honor Pledges (HP))",id:"5-halte-versprechen-ein-honor-pledges-hp",level:4},{value:"Praktisches",id:"praktisches",level:3},{value:"1. Umarme Unsicherheit (Embrace Uncertainty (EU))",id:"1-umarme-unsicherheit-embrace-uncertainty-eu",level:4},{value:"2. Fokussiere (Focus (F))",id:"2-fokussiere-focus-f",level:4},{value:"3. Wertsch\xe4tze Qualit\xe4t (Value Quality (VQ))",id:"3-wertsch\xe4tze-qualit\xe4t-value-quality-vq",level:4},{value:"4. Mach fertig (Get Things Done (GTD))",id:"4-mach-fertig-get-things-done-gtd",level:4},{value:"5. Halte Ordnung (Stay Clean (SC))",id:"5-halte-ordnung-stay-clean-sc",level:4},{value:"6. Bleib am Ball (Keep Moving (KM))",id:"6-bleib-am-ball-keep-moving-km",level:4},{value:"Source",id:"source",level:2}],u={toc:d},c="wrapper";function h(e){let{components:n,...i}=e;return(0,r.kt)(c,(0,t.Z)({},u,i,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"clean-code-developer"},"Clean Code Developer"),(0,r.kt)("h2",{id:"die-grade"},"Die Grade"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"0. Roter Grad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Orangener%20Grad"},"1. Orangener Grad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gelber%20Grad"},"2. Gelber Grad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Gr%C3%BCner%20Grad"},"3. Gr\xfcner Grad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer%20Grad"},"4. Blauer Grad")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Wei%C3%9Fer%20Grad"},"5 Wei\xdfer Grad"))),(0,r.kt)("h2",{id:"wertesystem"},"Wertesystem"),(0,r.kt)("h3",{id:"wandelbarkeit"},"Wandelbarkeit"),(0,r.kt)("p",null,"Wir m\xf6chten diesen Abschnitt mit einer provokant anmutenden These beginnen:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Es gibt keine Softwarewartung!")),(0,r.kt)("p",null,"Wartung ist ein pro-aktiver Vorgang. In Fertigungsanlagen werden regelm\xe4\xdfig Teile getauscht, bevor diese kaputt sind. Sie werden getauscht, weil Erfahrungswerte zeigen, dass die Zuverl\xe4ssigkeit beim Weiterbetrieb unter einen kritischen Wert sinken w\xfcrde. Bevor also die ganze Anlage zum Stillstand kommt, werden die kritischen Teile rechtzeitig vorher getauscht. Jeder Autobesitzer wei\xdf, dass er regelm\xe4\xdfig einen \xd6lwechsel vornehmen lassen muss. Nicht etwa, weil das \xd6l zu dem Zeitpunkt aufgebraucht w\xe4re, nicht einmal deshalb, weil das \xd6l zu dem Zeitpunkt bereits v\xf6llig wirkungslos w\xe4re. Nein, es wird getauscht, weil Erfahrungswerte des Herstellers zeigen, dass der Motor durch den rechtzeitigen \xd6lwechsel geschont wird und somit l\xe4nger h\xe4lt."),(0,r.kt)("p",null,"All das gibt es bei Software nicht. Software ist so, wie sie ist. Meist enth\xe4lt sie Fehler. Doch auch diese Fehler sind so, wie sie sind. Man kann nichts pro-aktiv unternehmen, um den Zustand der Software zu verbessern."),(0,r.kt)("p",null,"Nat\xfcrlich gibt es beim Betrieb der Software pro-aktive Handlungen. So sollte vielleicht regelm\xe4\xdfig gepr\xfcft werden, ob die Logdateien noch ausreichend freien Platz auf der Festplatte lassen, ob eine Datenbank \xfcberl\xe4uft oder der Speicher sich zunehmend f\xfcllt. Aber die Software an sich kann nicht pro-aktiv gewartet werden. Jegliche \xc4nderung oder Erweiterung findet statt, um einen Fehler zu beseitigen oder neue bzw. ge\xe4nderte Anforderungen umzusetzen."),(0,r.kt)("p",null,"Damit \xc4nderungen m\xf6glich sind, muss die Software eine innere Struktur haben, die solche \xc4nderungen beg\xfcnstigt. Dies bezeichnen wir als Wandelbarkeit. Software wird in der Regel \xfcber lange Zeitr\xe4ume betrieben. W\xe4hrend dieser Zeit \xe4ndern sich die Rahmenbedingungen, m\xfcssen Features erg\xe4nzt werden. Im Idealfall kostet die Implementierung eines Features einen festen Betrag, der unabh\xe4ngig davon ist, wann das Feature realisiert wird."),(0,r.kt)("p",null,"In der Praxis steigt der Preis allerdings f\xfcr ein Feature, je sp\xe4ter es realisiert wird. Am Anfang sind Features preiswert, am Ende ist es gar nicht mehr m\xf6glich Features zu erg\xe4nzen, weil niemand mehr durchblickt. Die Software wird weggeworfen und neu entwickelt. Bis man an diesem Punkt ankommt, steigen die Kosten exponentiell. Das gemeine an exponentiellem Wachstum sind zwei Dinge: 1.) Anfangs erkennt man kaum, dass die Kosten anwachsen. Die Steigerungen sind moderat. 2.) Wenn man dann erkennt, dass die Kosten steigen, ist es zu sp\xe4t. Die Steigerung schreitet dann pl\xf6tzlich so schnell voran, dass ein Gegensteuern nicht mehr m\xf6glich ist."),(0,r.kt)("p",null,"Je einfacher die Software an ge\xe4nderte Rahmenbedingungen angepasst werden kann, desto h\xf6her ist ihre Wandelbarkeit. Doch Wandelbarkeit erh\xe4lt man nicht nachtr\xe4glich. Sie muss von vorneherein ber\xfccksichtigt werden. Die Software muss darauf ausgelegt sein."),(0,r.kt)("p",null,"Dazu ein Beispiel: Klassen sollten genau eine Verantwortlichkeit haben. Ist eine Klasse f\xfcr mehr als eine Sache zust\xe4ndig, ist es schwerer sie zu \xfcberblicken. Das behindert \xc4nderungen, denn diese bedingen, dass man den Quellcode versteht, der ge\xe4ndert werden soll. Des weiteren steigt die Kopplung zwischen den Klassen. Pl\xf6tzlich h\xe4ngt alles mit allem zusammen. Dies kann nur verhindert werden, indem Funktionseinheiten eine klar definierte Verantwortlichkeit haben und man die Kopplung im Blick beh\xe4lt. Hat man in einem Softwaresystem eine Reihe von Klassen angesammelt, die jeweils f\xfcr mehrere Dinge verantwortlich sind, ist es im Nachhinein nur schwer m\xf6glich, diesen Zustand zu beseitigen. Die Kopplung ist so gro\xdf, dass es schwer f\xe4llt, einzelne Funktionseinheiten heraus zu l\xf6sen. Sollen in diesem Dickicht neue Features realisiert werden, ist das sehr aufw\xe4ndig. Wenn nicht rechtzeitig begonnen wird, das Dickicht zu lichten, wird die Situation mit jedem mal schlimmer. Ab einem gewissen Punkt ist es dann kaum noch m\xf6glich, neue Features zu erg\xe4nzen. Der Super-GAU der Softwareentwicklung."),(0,r.kt)("p",null,"Wir meinen, dass es soweit nicht kommen muss. Ber\xfccksichtigt man Wandelbarkeit von vorne herein, kann Software \xfcber lange Zeitr\xe4ume weiter entwickelt werden. Die Kosten pro Feature m\xf6gen dabei im Laufe der Zeit leicht ansteigen. Aber keinesfalls exponentiell!"),(0,r.kt)("h3",{id:"korrektheit"},"Korrektheit"),(0,r.kt)("p",null,"Software muss funktional korrekt sein. Ein Buchhaltungsprogramm muss die Buchungen ordnungsgem\xe4\xdf verbuchen, eine Tabellenkalkulation muss richtig rechnen. Und auch die nicht-funktionalen Anforderungen m\xfcssen erf\xfcllt sein. Das Programm muss schonend mit Ressourcen wie Speicher, Prozessorzeit, Plattenplatz, etc. umgehen, die Antwortzeiten m\xfcssen in einem definierten Rahmen liegen. Erst wenn alle Anforderungen erf\xfcllt sind, ist die erstellte Software korrekt."),(0,r.kt)("p",null,"Dass Korrektheit erforderlich ist, wird niemand bestreiten. Doch die Frage ist, was konkret daf\xfcr getan wird. Es reicht unserer Ansicht nach nicht aus, Software nach deren Erstellung durch eine Testabteilung zu leiten, deren Aufgabe es ist, Fehler zu finden. Wir meinen, Korrektheit muss bereits w\xe4hrend der Entwicklung ber\xfccksichtigt werden. Bereits die Entwickler m\xfcssen sich mit der Frage der Korrektheit auseinandersetzen. Und damit sie das \xfcberhaupt k\xf6nnen, muss ihnen klar sein, was die Anforderungen sind. Schon daran mangelt es zu oft. Entwickler werden beauftragt, ein Feature zu implementieren, ohne ihnen pr\xe4zise zu sagen, was die Abnahmekriterien f\xfcr das Feature sind. Doch hier geht es nicht darum, Schwarzer Peter zu spielen und einen Schuldigen au\xdferhalb der Entwicklungsabteilungen zu suchen. Schlie\xdflich ist es die Aufgabe der Entwickler, bei unklaren Anforderungen nachzufragen, statt in ihre Glaskugel zu schauen."),(0,r.kt)("p",null,"Verglichen mit dem Automobilbau steht die Softwareentwicklung beim Thema Korrektheit schlecht da. Ein Auto besteht aus vielen Teilen, deren Korrektheit jeweils einzeln nachgewiesen und \xfcberpr\xfcft werden kann. Stellen Sie sich vor, Sie m\xfcssten zur Fehlersuche mit einem Me\xdfger\xe4t in der Hand auf der Motorhaube des Autos sitzen, um dort verfolgen zu k\xf6nnen, was sich in der Maschine abspielt. Mit Tempo 200 auf der Autobahn. Kommt Ihnen komisch vor? Ein Debugger wird in vielen F\xe4llen genau so eingesetzt. Das halten wir f\xfcr falsch."),(0,r.kt)("h3",{id:"produktionseffizienz"},"Produktionseffizienz"),(0,r.kt)("p",null,"Am Ende spielen nat\xfcrlich auch die Entwicklungszeit und der Preis der Software eine Rolle. Und der ist h\xf6her, wenn die Produktion der Software nicht effizient erfolgt. Das beginnt bei manuellen Arbeitsschritten, die nicht automatisiert werden und endet bei hohen Fehlerraten die mehrmaliges Nachbessern erfordern. In letzter Konsequenz bedeutet Produktionseffizienz, dass die Software \xfcber Jahre oder gar Jahrzehnte weiterentwickelt werden kann, statt irgendwann wieder von vorne beginnen zu m\xfcssen. Gleichzeitig reduziert eine hohe Produktionseffizienz die Anf\xe4lligkeit f\xfcr Fehler."),(0,r.kt)("p",null,"Die Produktionseffizienz als Wert ist ferner wichtig, um die anderen Werte in ein ma\xdfvolles Verh\xe4ltnis zu setzen. Wer unendlich viel Aufwand f\xfcr die Korrektheit treibt, macht am Ende auch etwas falsch."),(0,r.kt)("h3",{id:"kontinuierliche-verbesserung"},"Kontinuierliche Verbesserung"),(0,r.kt)("p",null,"Ohne R\xfcckschau ist keine Weiterentwicklung m\xf6glich. Nur wer reflektiert, wie er eine Aufgabenstellung gel\xf6st hat, kann feststellen, ob der gew\xe4hlte Weg einfach oder beschwerlich war. Lernen basiert auf Reflexion."),(0,r.kt)("p",null,"In einer jungen Wissenschaft wie der Informatik ist es wichtig, stets neue Erkenntnisse zu ber\xfccksichtigen. Dazu ist Reflexion auf allen Ebenen erforderlich. Angefangen beim Reflektieren \xfcber die Implementation beim Pair Programming oder Code Review, das t\xe4gliche Reflektieren des Teams, die Reflexion nach jeder Iteration, bis hin zur Reflexion der gesamten Branche \xfcber ihr Tun. Ohne Reflexion keine Weiterentwicklung."),(0,r.kt)("h3",{id:"prinzipien-und-praktiken"},"Prinzipien und Praktiken"),(0,r.kt)("p",null,"Das Wertesystem leitet Clean Code Developer in ihrer t\xe4glichen Arbeit. Es enth\xe4lt keine Probleml\xf6sungen, sondern definiert Rahmenbedingungen f\xfcr Probleml\xf6sungen. Die vier Werte sind f\xfcr eine konkrete allt\xe4gliche Umsetzung jedoch zu abstrakt. Daher haben wir Bausteine zusammengetragen, die jeweils mindestens einen der Werte bef\xf6rdern. Diese konkreten Bausteine teilen wir in zwei Kategorien: Prinzipien und Praktiken."),(0,r.kt)("h4",{id:"prinzipien"},"Prinzipien"),(0,r.kt)("p",null,"Die Clean Code Developer Prinzipien sind die grundlegenden Gesetzm\xe4\xdfigkeiten f\xfcr die Strukturierung von Software. Sie sind entweder zu anderen Rahmenbedingungen orthogonal oder ihnen \xfcbergeordnet. Code sollte immer im Einklang mit einer maximalen Zahl von Prinzipien sein. Nat\xfcrlich haben sie nicht \u201edie Macht\u201c von Naturgesetzen, denen niemand zuwiderhandeln kann. Aber sie sind mit ihnen in Bezug auf die Softwareentwicklung gleichauf in ihrer Fundamentalit\xe4t. Wo ein Prinzip nicht eingehalten wird, tritt also nicht unbedingt sofort ein negativer Effekt ein, aber kurz- bis mittelfristig bleiben Zuwiderhandlungen nicht ohne Schmerz. Der dr\xfcckt sich in M\xfche beim Codeverst\xe4ndnis aus oder im hohen Aufwand, um \xc4nderungen einzubringen. Ultimativ ist er, wenn Software nicht mehr evolvierbar ist. Ob ein Prinzip eingehalten wurde, kann man dem Code immer ansehen."),(0,r.kt)("h4",{id:"praktiken"},"Praktiken"),(0,r.kt)("p",null,"Praktiken sind Techniken und Methoden, die st\xe4ndig zum Einsatz kommen. Sie beschreiben, was Clean Code Developer praktisch tun. Motto der Praktiken: \u201eTue es immer so. Jeden Tag, jederzeit.\u201c Es sind handfeste Handlungsanweisungen, die manchmal des Einsatzes von Werkzeugen bed\xfcrfen. Ob einer Praktik gefolgt wird, kann man dem Code nicht immer ansehen."),(0,r.kt)("h2",{id:"die-tugenden"},"Die Tugenden"),(0,r.kt)("h3",{id:"prinzipielles"},"Prinzipielles"),(0,r.kt)("h4",{id:"1-sch\xe4tze-variation-value-variation-vv"},"1. Sch\xe4tze Variation (Value Variation (VV))"),(0,r.kt)("p",null,"Werte: Wandelbarkeit, Kontinuierliche Verbesserung"),(0,r.kt)("h4",{id:"2-tue-nur-das-n\xf6tigste-do-only-whats-neccessary-down"},"2. Tue nur das N\xf6tigste (Do Only What\xb4s Neccessary (DOWN))"),(0,r.kt)("p",null,"Werte: Produktionseffizienz, Wandelbarkeit"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vorsicht vor Optimierungen! (Prinzip des\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"roten Grades"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/You%20Aint%20Gonna%20Need%20It"},"You Aint Gonna Need It")," (Prinzip des\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Blauer%20Grad"},"blauen Grades"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/KISS"},"KISS")," (Prinzip des\xa0",(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Grade/Roter%20Grad"},"roten Grades"),")")),(0,r.kt)("h4",{id:"3-isoliere-aspekte-isolate-aspects-ia"},"3. Isoliere Aspekte (Isolate Aspects (IA))"),(0,r.kt)("p",null,"Werte: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Wandelbarkeit"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/DRY"},"DRY")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Separation%20of%20Concerns"},"Separation of Concerns")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single%20Level%20of%20Abstraction"},"Single Level of Abstraction")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Single%20Responsibility%20Principle"},"Single Responsibility Principle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Interface%20Segragation%20Principle"},"Interface Segragation Principle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Design%20and%20Implementation%20Dont%20Overlapp"},"Design and Implementation Dont Overlapp")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Integration%20Operation%20Segregation%20Principle%20(IOSP).md"},"Integration Operation Segregation Principle (IOSP)"))),(0,r.kt)("h4",{id:"4-minimiere-abh\xe4ngigkeiten-minimize-dependencies-md"},"4. Minimiere Abh\xe4ngigkeiten (Minimize Dependencies (MD))"),(0,r.kt)("p",null,"Werte:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Wandelbarkeit"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Dependency%20Inversion%20Principle"},"Dependency Inversion Principle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Information%20Hiding%20Principle"},"Information Hiding Principle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Law%20of%20Demeter"},"Law of Demeter")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Tell,%20dont%20ask"},"Tell, dont ask"))),(0,r.kt)("h4",{id:"5-halte-versprechen-ein-honor-pledges-hp"},"5. Halte Versprechen ein (Honor Pledges (HP))"),(0,r.kt)("p",null,"Werte: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Wandelbarkeit oder auch: Minimize Surprises"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Praktiken/Liskov%20Substitution%20Principle"},"Liskov Substitution Principle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Principle%20of%20Least%20Astonishment"},"Principle of Least Astonishment")),(0,r.kt)("li",{parentName:"ul"},"Implementation spiegelt Entwurf"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/main/CleanCode/CleanCodeDeveloper/Prinzipien/Favour%20Composition%20over%20Inheritance"},"Favour Composition over Inheritance")," (FCoI)")),(0,r.kt)("h3",{id:"praktisches"},"Praktisches"),(0,r.kt)("h4",{id:"1-umarme-unsicherheit-embrace-uncertainty-eu"},"1. Umarme Unsicherheit (Embrace Uncertainty (EU))"),(0,r.kt)("p",null,"Werte: Wandelbarkeit, Kontinuierliche Verbesserung"),(0,r.kt)("p",null,"Ein Versionskontrollsystem einsetzenAutomatisierte IntegrationstestsAutomatisierte Unit TestsMockups (Testattrappen)Continuous IntegrationInversion of Control Container"),(0,r.kt)("h4",{id:"2-fokussiere-focus-f"},"2. Fokussiere (Focus (F))"),(0,r.kt)("p",null,"Werte: Produktionseffizienz"),(0,r.kt)("p",null,"KomponentenorientierungTest firstLimit WIP // neu"),(0,r.kt)("h4",{id:"3-wertsch\xe4tze-qualit\xe4t-value-quality-vq"},"3. Wertsch\xe4tze Qualit\xe4t (Value Quality (VQ))"),(0,r.kt)("p",null,"Werte: Produktionseffizienz"),(0,r.kt)("p",null,"Akzeptiere nur hohe Qualit\xe4t // neuAutomatisierte Unit TestsReviews"),(0,r.kt)("h4",{id:"4-mach-fertig-get-things-done-gtd"},"4. Mach fertig (Get Things Done (GTD))"),(0,r.kt)("p",null,"Werte: Produktionseffizienz"),(0,r.kt)("p",null,"Iterative EntwicklungContinuous DeliveryLimit WIP"),(0,r.kt)("h4",{id:"5-halte-ordnung-stay-clean-sc"},"5. Halte Ordnung (Stay Clean (SC))"),(0,r.kt)("p",null,"Werte: Wandelbarkeit, Korrektheit, Produktionseffizienz"),(0,r.kt)("p",null,"Die Pfadfinderregel beachtenKomplexe RefaktorisierungenEinfache Refaktorisierungsmuster anwendenStatische Codeanalyse (Metriken)Code Coverage AnalyseSource Code Konventionen // ehemals Prinzip"),(0,r.kt)("h4",{id:"6-bleib-am-ball-keep-moving-km"},"6. Bleib am Ball (Keep Moving (KM))"),(0,r.kt)("p",null,"Werte: Kontinuierliche Verbesserung"),(0,r.kt)("p",null,"Lesen, Lesen, LesenTeilnahme an FachveranstaltungenErfahrung weitergebenT\xe4glich reflektierenRoot Cause AnalysisMessen von FehlernIssue TrackingRegelm\xe4\xdfige Retrospektiven // neu"),(0,r.kt)("h2",{id:"source"},"Source"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://clean-code-developer.de/"},"Clean Code Developer")))}h.isMDXComponent=!0}}]);